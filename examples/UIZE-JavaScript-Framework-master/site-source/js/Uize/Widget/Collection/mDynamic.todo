This is a TO DO document for the proposed =Uize.Widget.Collection.mDynamic= mixin module.

Factored Functionality
	Factor out all of the functionality that currently resides in =Uize.Widget.Collection.Dynamic= into =Uize.Widget.Collection.myDynamic= mix-in module and then have =Uize.Widget.Collection.Dynamic= just mix in the functionality. This would allow for a widget to subclass =Uize.Widget.Collection= but also mix in the "dynamic" functionality further down in its inheritance tree.
	
	NOTES
	- Any private instance variables or methods will need to become public namespaced variables or methods since we cannot guarantee that when the module is mixed in that the scrunched token names will not collide
	- Some of this "dynamic" functionality may move into a =Uize.Widget.Repeater.mDynamic= mixin module once =Uize.Widget.Repeater= (a potential superclass of =Uize.Widget.Collection=) is created
