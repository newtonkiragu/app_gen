
# coding: utf-8
# AUTOGENERATED BY appgen
# Copyright (C) Nyimbi Odero, 2024
 


import os
import sys
import enum
import inspect
import datetime
import shutil
from datetime import timedelta, datetime, date

from sqlalchemy.orm import relationship, query, defer, deferred, column_property, mapper
from sqlalchemy.schema import FetchedValue
from sqlalchemy.ext.hybrid import hybrid_property, hybrid_method
from sqlalchemy import (Column, Integer, String, ForeignKey,
    Sequence, Float, Text, BigInteger, Date, SmallInteger,
    DateTime, Time, Boolean, Index, CheckConstraint, Interval,
    UniqueConstraint, ForeignKeyConstraint, PrimaryKeyConstraint, Numeric, LargeBinary, Table, func, Enum,
    text)

from sqlalchemy.dialects.postgresql import *
from sqlalchemy.dialects.postgresql import (
    ARRAY, BIGINT, BIT, BOOLEAN, BYTEA, CHAR, CIDR, DATE,
    DOUBLE_PRECISION, ENUM, FLOAT, HSTORE, INET, INTEGER,
    INTERVAL, JSON, JSONB, MACADDR, NUMERIC, OID, REAL, SMALLINT, TEXT,
    TIME, TIMESTAMP, UUID, VARCHAR, INT4RANGE, INT8RANGE, NUMRANGE,
    DATERANGE, TSRANGE, TSTZRANGE, TSVECTOR, aggregate_order_by )

from flask_appbuilder import Model
from flask_appbuilder.models.mixins import AuditMixin, FileColumn, ImageColumn, UserExtensionMixin
from flask_appbuilder.filemanager import ImageManager
from flask_appbuilder.models.decorators import renders

from sqlalchemy_utils import aggregated, force_auto_coercion, observes
from sqlalchemy_utils.types import TSVectorType
from sqlalchemy.ext.associationproxy import association_proxy

from geoalchemy2 import Geometry

# Domains defined in the database


# Enums defined in the database

class t_admin_level(enum.Enum):
    CONTINENT = 'Continent'
    REGION = 'Region'
    SUPRANATIONAL = 'Supranational'
    COUNTRY = 'Country'
    FEDERAL = 'Federal'
    STATE = 'State'
    LGA = 'LGA'
    WARD = 'Ward'
    PROVINCE = 'Province'
    COUNTY = 'County'
    DISTRICT = 'District'
    LOCATION = 'Location'
    SUB_LOCATION = 'Sub_location'
    CANTON = 'Canton'
    MUNICIPALITY = 'Municipality'
    TOWN = 'Town'
    VILLAGE = 'Village'
    NEIGHBORHOOD = 'Neighborhood'
    BOROUGH = 'Borough'
    SUBURB = 'Suburb'
    ZONE = 'Zone'

class t_climate_category(enum.Enum):
    ADAPTATION = 'Adaptation'
    COASTAL_ZONES = 'Coastal_Zones'
    DISASTER_PREPAREDNESS = 'Disaster_Preparedness'
    FOOD_SECURITY = 'Food_Security'
    HEALTH = 'Health'
    WATER = 'Water'
    CLIMATE_JUSTICE = 'Climate_Justice'
    GENDER_EQUALITY = 'Gender_Equality'
    HUMAN_RIGHTS = 'Human_Rights'
    VULNERABLE_COMMUNITIES = 'Vulnerable_Communities'
    MITIGATION = 'Mitigation'
    AGRICULTURE = 'Agriculture'
    ENERGY = 'Energy'
    FORESTS = 'Forests'
    INDUSTRY = 'Industry'
    WASTE = 'Waste'

class t_contact_status(enum.Enum):
    NEW = 'New'
    CONTACTED = 'Contacted'
    QUALIFIED = 'Qualified'
    UNQUALIFIED = 'Unqualified'
    CUSTOMER = 'Customer'
    INACTIVE = 'Inactive'
    BLOCKED = 'Blocked'
    DELETED = 'Deleted'

class t_date_macro(enum.Enum):
    ALL = 'All'
    TODAY = 'Today'
    THISWEEK = 'ThisWeek'
    THISWEEKTODATE = 'ThisWeekToDate'
    THISMONTH = 'ThisMonth'
    THISMONTHTODATE = 'ThisMonthToDate'
    THISCALENDARQUARTER = 'ThisCalendarQuarter'
    THISCALENDARQUARTERTODATE = 'ThisCalendarQuarterToDate'
    THISFISCALQUARTER = 'ThisFiscalQuarter'
    THISFISCALQUARTERTODATE = 'ThisFiscalQuarterToDate'
    THISCALENDARYEAR = 'ThisCalendarYear'
    THISCALENDARYEARTODATE = 'ThisCalendarYearToDate'
    THISFISCALYEAR = 'ThisFiscalYear'
    THISFISCALYEARTODATE = 'ThisFiscalYearToDate'
    YESTERDAY = 'Yesterday'
    LASTWEEK = 'LastWeek'
    LASTWEEKTODATE = 'LastWeekToDate'
    LASTMONTH = 'LastMonth'
    LASTMONTHTODATE = 'LastMonthToDate'
    LASTCALENDARQUARTER = 'LastCalendarQuarter'
    LASTCALENDARQUARTERTODATE = 'LastCalendarQuarterToDate'
    LASTFISCALQUARTER = 'LastFiscalQuarter'
    LASTFISCALQUARTERTODATE = 'LastFiscalQuarterToDate'
    LASTCALENDARYEAR = 'LastCalendarYear'
    LASTCALENDARYEARTODATE = 'LastCalendarYearToDate'
    LASTFISCALYEAR = 'LastFiscalYear'
    LASTFISCALYEARTODATE = 'LastFiscalYearToDate'
    NEXTWEEK = 'NextWeek'
    NEXTFOURWEEKS = 'NextFourWeeks'
    NEXTMONTH = 'NextMonth'
    NEXTCALENDARQUARTER = 'NextCalendarQuarter'
    NEXTCALENDARYEAR = 'NextCalendarYear'
    NEXTFISCALQUARTER = 'NextFiscalQuarter'
    NEXTFISCALYEAR = 'NextFiscalYear'

class t_doc_status(enum.Enum):
    NOT_STARTED = 'Not_Started'
    DRAFT = 'Draft'
    IN_PROGRESS = 'In_Progress'
    AWAITING_REVIEW = 'Awaiting_Review'
    UNDER_REVIEW = 'Under_Review'
    REVIEW_COMPLETED = 'Review_Completed'
    REVISIONS_NEEDED = 'Revisions_Needed'
    SUBMITTED = 'Submitted'
    APPROVED = 'Approved'
    PARTIALLY_APPROVED = 'Partially_Approved'
    REJECTED = 'Rejected'
    CANCELLED = 'Cancelled'
    ARCHIVED = 'Archived'
    PUBLISHED = 'Published'
    SUSPENDED = 'Suspended'
    VOIDED = 'Voided'
    COMPLETED = 'Completed'
    EXPIRED = 'Expired'
    RENEWED = 'Renewed'
    LOCKED = 'Locked'
    MERGED = 'Merged'
    ROLLBACK = 'Rollback'
    CONFLICT = 'Conflict'
    QUEUED_FOR_REVIEW = 'Queued_for_Review'
    QUEUED_FOR_PUBLISH = 'Queued_for_Publish'
    DEPRECATED = 'Deprecated'
    UNPUBLISHED = 'Unpublished'
    IN_TRANSLATION = 'In_Translation'
    VALIDATION_FAILED = 'Validation_Failed'
    VALIDATION_PASSED = 'Validation_Passed'
    DIGITIZED = 'Digitized'
    IN_SIGNATURE_PROCESS = 'In_Signature_Process'
    SIGNATURE_COMPLETED = 'Signature_Completed'
    SIGNATURE_FAILED = 'Signature_Failed'
    IN_AUDIT = 'In_Audit'
    AUDIT_COMPLETED = 'Audit_Completed'
    IN_TRANSIT = 'In_Transit'
    RECEIVED = 'Received'
    SENT = 'Sent'

class t_doc_type(enum.Enum):
    REGISTRATION = 'Registration'
    TAX_CLEARANCE = 'Tax_Clearance'
    INCOME_TAX_RETURN = 'Income_Tax_Return'
    VAT_RETURN = 'VAT_Return'
    FINANCIAL_STATEMENTS = 'Financial_Statements'
    PROFIT_AND_LOSS = 'Profit_and_Loss'
    BALANCE_SHEET = 'Balance_Sheet'
    CASH_FLOW_STATEMENT = 'Cash_Flow_Statement'
    GOVERNANCE_STRUCTURE = 'Governance_Structure'
    BOARD_RESOLUTIONS = 'Board_Resolutions'
    SHAREHOLDERS_AGREEMENT = 'Shareholders_Agreement'
    OPERATIONAL_LICENSE = 'Operational_License'
    STANDARD_OPERATING_PROCEDURES = 'Standard_Operating_Procedures'
    ENVIRONMENTAL_IMPACT_ASSESSMENT = 'Environmental_Impact_Assessment'
    LEGAL_ENTITY_FORMATION = 'Legal_Entity_Formation'
    CONTRACTUAL_AGREEMENTS = 'Contractual_Agreements'
    PERMITS_AND_LICENSES = 'Permits_and_Licenses'
    BANK_STATEMENT = 'Bank_Statement'
    PROOF_OF_FUNDS = 'Proof_of_Funds'
    ID_CARD = 'ID_Card'
    PASSPORT = 'Passport'
    DRIVERS_LICENSE = 'Drivers_License'
    UTILITY_BILL = 'Utility_Bill'
    RENTAL_AGREEMENT = 'Rental_Agreement'
    OTHER = 'Other'

class t_doc_verification_status(enum.Enum):
    PENDING_APPROVAL = 'pending_approval'
    KYC_SUBMITTED = 'kyc_submitted'
    KYC_APPROVED = 'kyc_approved'
    KYC_REJECTED = 'kyc_rejected'
    ESCALATED = 'escalated'
    CONTRACTED = 'contracted'
    ACTIVE = 'active'
    SUSPENDED = 'suspended'
    INACTIVE = 'inactive'
    CONTRACT_TERMINATED = 'contract_terminated'
    DOCS_EXPIRED = 'docs_expired'
    UNDER_REVIEW = 'under_review'
    LOCKED = 'locked'
    AWAITING_RENEWAL = 'awaiting_renewal'
    RENEWAL_REJECTED = 'renewal_rejected'
    VERIFICATION_FAILED = 'verification_failed'

class t_entity_type(enum.Enum):
    PERSON = 'person'
    ORGANIZATION = 'organization'

class t_gender(enum.Enum):
    MALE = 'Male'
    FEMALE = 'Female'
    NON_BINARY = 'Non_Binary'
    PREFER_NOT_TO_SAY = 'Prefer_Not_to_Say'
    OTHER = 'Other'

class t_grant_status(enum.Enum):
    SUBMITTED = 'Submitted'
    PENDING_REVIEW = 'Pending_Review'
    APPROVED = 'Approved'
    FUNDED = 'Funded'
    IN_PROGRESS = 'In_Progress'
    DELAYED = 'Delayed'
    SUSPENDED = 'Suspended'
    COMPLETED = 'Completed'
    CLOSED = 'Closed'
    TERMINATED = 'Terminated'
    REJECTED = 'Rejected'

class t_interval(enum.Enum):
    NONE = 'None'
    PER_SECOND = 'Per_Second'
    PER_MINUTE = 'Per_Minute'
    HOURLY = 'Hourly'
    DAILY = 'Daily'
    WEEKLY = 'Weekly'
    BIWEEKLY = 'Biweekly'
    MONTHLY = 'Monthly'
    BIMONTHLY = 'Bimonthly'
    QUARTERLY = 'Quarterly'
    SEMI_ANNUALLY = 'Semi_Annually'
    ANNUALLY = 'Annually'
    CUSTOM = 'Custom'
    WORKDAYS = 'Workdays'
    WEEKENDS = 'Weekends'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'
    FIRST_DAY_MONTH = 'FIRST_DAY_MONTH'
    LAST_DAY_MONTH = 'LAST_DAY_MONTH'
    FIRST_WEEKDAY = 'FIRST_WEEKDAY'
    LAST_WEEKDAY = 'LAST_WEEKDAY'
    EVERY_X_DAYS = 'EVERY_X_DAYS'
    EVERY_X_WEEKS = 'EVERY_X_WEEKS'
    EVERY_X_MONTHS = 'EVERY_X_MONTHS'
    EVERY_X_YEARS = 'EVERY_X_YEARS'

class t_language_proficiency_level(enum.Enum):
    BASIC = 'BASIC'
    INTERMEDIATE = 'INTERMEDIATE'
    ADVANCED = 'ADVANCED'
    FLUENT = 'FLUENT'
    A1 = 'A1'
    A2 = 'A2'
    B1 = 'B1'
    B2 = 'B2'
    C1 = 'C1'
    C2 = 'C2'

class t_org_hierarchy_type(enum.Enum):
    PARENT = 'parent'
    SUBSIDIARY = 'subsidiary'
    DEPARTMENT = 'department'
    DIVISION = 'division'
    UNIT = 'unit'
    TEAM = 'team'
    BRANCH = 'branch'
    OFFICE = 'office'
    LOCATION = 'location'
    REGION = 'region'
    COUNTRY = 'country'
    GLOBAL = 'global'
    HOLDING_COMPANY = 'holding_company'
    JOINT_VENTURE = 'joint_venture'
    PARTNERSHIP = 'partnership'
    FRANCHISE = 'franchise'
    AFFILIATE = 'affiliate'
    CUSTOMER = 'customer'
    SUPPLIER = 'supplier'

class t_org_type(enum.Enum):
    INGO = 'INGO'
    CBO = 'CBO'
    NNGO = 'NNGO'
    INDIVIDUAL = 'Individual'
    BUSINESS_NAME = 'Business_Name'
    SOLE_PROPRIETORSHIP = 'Sole_Proprietorship'
    PARTNERSHIP = 'Partnership'
    PRIVATE_LIMITED_COMPANY = 'Private_Limited_Company'
    PUBLIC_LIMITED_COMPANY = 'Public_Limited_Company'
    PUBLIC_COMPANY_LIMITED_BY_GUARANTEE = 'Public_Company_Limited_by_Guarantee'
    PRIVATE_UNLIMITED_COMPANY = 'Private_Unlimited_Company'
    PUBLIC_UNLIMITED_COMPANY = 'Public_Unlimited_Company'
    COOPERATIVE = 'Cooperative'
    NONPROFIT = 'Nonprofit'
    TRUST = 'Trust'
    GOVERNMENT = 'Government'
    FRANCHISE = 'Franchise'
    SUBSIDIARY = 'Subsidiary'
    HOLDING_COMPANY = 'Holding_Company'
    JOINT_VENTURE = 'Joint_Venture'
    FREELANCER = 'Freelancer'
    AGENCY = 'Agency'
    WOMENS_GROUP = 'Womens_Group'
    MEITI_ALLAH = 'Meiti_Allah'
    INFORMAL_GROUP = 'Informal_Group'
    CHAMA = 'Chama'
    OTHER_GROUPINGS = 'Other_Groupings'
    FAMILY = 'Family'
    CLAN = 'Clan'
    TRIBE = 'Tribe'
    ASSOCIATION = 'Association'
    CLUB = 'Club'
    CONSORTIUM = 'Consortium'
    SYNDICATE = 'Syndicate'
    COLLECTIVE = 'Collective'
    NETWORK = 'Network'
    FOUNDATION = 'Foundation'
    FEDERATION = 'Federation'
    CHAMBER_OF_COMMERCE = 'Chamber_of_Commerce'
    GUILD = 'Guild'
    UNION = 'Union'
    RELIGIOUS_ORGANIZATION = 'Religious_Organization'
    POLITICAL_ORGANIZATION = 'Political_Organization'
    ALUMNI_ASSOCIATION = 'Alumni_Association'
    AFFILIATE = 'Affiliate'
    DIVISION = 'Division'
    COUNCIL = 'Council'
    TASK_FORCE = 'Task_Force'
    SOCIAL_CLUB = 'Social_Club'
    CHARITY = 'Charity'
    THINK_TANK = 'Think_Tank'

class t_organization_status(enum.Enum):
    ACTIVE = 'Active'
    INACTIVE = 'Inactive'
    PENDING = 'Pending'
    ONHOLD = 'OnHold'
    BLOCKED = 'Blocked'
    DELETED = 'Deleted'

class t_payment_method(enum.Enum):
    CASH = 'cash'
    CREDIT_CARD = 'credit_card'
    DEBIT_CARD = 'debit_card'
    PREPAID_CARD = 'prepaid_card'
    COMMERCIAL_CARD = 'commercial_card'
    DEBT = 'debt'
    BANK = 'bank'
    MOBILE = 'mobile'
    COUPON = 'coupon'
    ORDER = 'order'
    WITHDRAWAL = 'Withdrawal'
    FUND_WALLET = 'fund_wallet'
    CHEQUE = 'cheque'
    BANK_TRANSFER = 'bank_transfer'
    CRYPTO = 'crypto'
    BARTER = 'barter'
    WIRE_TRANSFER = 'wire_transfer'
    CONTACTLESS = 'contactless'
    GIFT_CARD = 'gift_card'
    LOYALTY_POINTS = 'loyalty_points'
    MONEY_ORDER = 'money_order'
    ESCROW = 'escrow'
    INSTALLMENT = 'installment'
    INVOICE = 'invoice'
    PREPAID = 'prepaid'
    QR_CODE = 'qr_code'
    DIGITAL_WALLET = 'digital_wallet'
    AUTOMATIC_DEBIT = 'automatic_debit'
    CASH_ON_DELIVERY = 'cash_on_delivery'
    POSTPAID = 'postpaid'
    THIRD_PARTY = 'third_party'
    TRADE_CREDIT = 'trade_credit'

class t_person_application_status(enum.Enum):
    SUBMITTED = 'Submitted'
    PENDING_REVIEW = 'Pending_Review'
    UNDER_REVIEW = 'Under_Review'
    APPROVED = 'Approved'
    REJECTED = 'Rejected'
    WITHDRAWN = 'Withdrawn'
    ON_HOLD = 'On_Hold'
    COMPLETED = 'Completed'

class t_person_role(enum.Enum):
    ADMINISTRATOR = 'Administrator'
    OWNER = 'Owner'
    PROGRAMME_MANAGER = 'Programme_manager'
    PROGRAMME_OFFICER = 'Programme_officer'
    STORE_KEEPER = 'Store_keeper'
    CONSULTANT = 'Consultant'
    SPECIALIST = 'Specialist'
    STAFF = 'Staff'
    LEARNER = 'Learner'
    MEMBER = 'Member'
    VOLUNTEER = 'Volunteer'
    DONOR = 'Donor'

class t_project_status(enum.Enum):
    INITIATED = 'Initiated'
    PLANNED = 'Planned'
    IN_PROGRESS = 'In_Progress'
    DELAYED = 'Delayed'
    SUSPENDED = 'Suspended'
    COMPLETED = 'Completed'
    CANCELLED = 'Cancelled'
    CLOSED = 'Closed'

class t_sdgs(enum.Enum):
    NO_POVERTY = 'No_Poverty'
    ZERO_HUNGER = 'Zero_Hunger'
    GOOD_HEALTH_AND_WELLBEING = 'Good_Health_And_Wellbeing'
    QUALITY_EDUCATION = 'Quality_Education'
    GENDER_EQUALITY = 'Gender_Equality'
    CLEAN_WATER_AND_SANITATION = 'Clean_Water_And_Sanitation'
    AFFORDABLE_AND_CLEAN_ENERGY = 'Affordable_And_Clean_Energy'
    DECENT_WORK_AND_ECONOMIC_GROWTH = 'Decent_Work_And_Economic_Growth'
    INDUSTRY_INNOVATION_AND_INFRASTRUCTURE = 'Industry_Innovation_And_Infrastructure'
    REDUCED_INEQUALITY = 'Reduced_Inequality'
    SUSTAINABLE_CITIES_AND_COMMUNITIES = 'Sustainable_Cities_And_Communities'
    RESPONSIBLE_CONSUMPTION_AND_PRODUCTION = 'Responsible_Consumption_And_Production'
    CLIMATE_ACTION = 'Climate_Action'
    LIFE_BELOW_WATER = 'Life_Below_Water'
    LIFE_ON_LAND = 'Life_On_Land'
    PEACE_JUSTICE_AND_STRONG_INSTITUTIONS = 'Peace_Justice_And_Strong_Institutions'
    PARTNERSHIPS_FOR_THE_GOALS = 'Partnerships_For_The_Goals'

class t_severity_level(enum.Enum):
    INSIGNIFICANT = 'Insignificant'
    TRIVIAL = 'Trivial'
    LOW = 'Low'
    MODERATE = 'Moderate'
    SIGNIFICANT = 'Significant'
    HIGH = 'High'
    URGENT = 'Urgent'
    SEVERE = 'Severe'
    EXTREME = 'Extreme'
    CRITICAL = 'Critical'

class t_social_media_platform(enum.Enum):
    LINKEDIN = 'LinkedIn'
    FACEBOOK = 'Facebook'
    TWITTER = 'Twitter'
    INSTAGRAM = 'Instagram'
    YOUTUBE = 'YouTube'
    TIKTOK = 'TikTok'
    PINTEREST = 'Pinterest'
    SNAPCHAT = 'Snapchat'
    REDDIT = 'Reddit'
    WHATSAPP = 'WhatsApp'
    TELEGRAM = 'Telegram'
    DISCORD = 'Discord'
    OTHER = 'Other'

class t_transaction_status(enum.Enum):
    PENDING = 'pending'
    AUTHORIZED = 'authorized'
    COMPLETED = 'completed'
    FAILED = 'failed'
    CANCELLED = 'cancelled'
    REFUNDED = 'refunded'
    REVERSED = 'reversed'
    HOLD = 'hold'
    SUSPENDED = 'suspended'
    DISPUTED = 'disputed'
    DELIVERED = 'delivered'
    SETTLEMENT_PENDING = 'settlement_pending'
    SETTLED = 'settled'
    REJECTED = 'rejected'
    EXPIRED = 'expired'
    PENDING_VERIFICATION = 'pending_verification'
    HOLD_FOR_REVIEW = 'hold_for_review'
    PARTIALLY_COMPLETED = 'partially_completed'
    PARTIALLY_REFUNDED = 'partially_refunded'
    PARTIALLY_REVERSED = 'partially_reversed'
    COMPLETED_WITH_ERRORS = 'completed_with_errors'
    BATCH_PROCESSING = 'batch_processing'
    DEFERRED = 'deferred'
    WAITING_FOR_AUTHORIZATION = 'waiting_for_authorization'
    PROCESSING = 'processing'
    PENDING_FUNDS_AVAILABILITY = 'pending_funds_availability'
    PENDING_REVIEW = 'pending_review'
    PENDING_CONFIRMATION = 'pending_confirmation'
    WAITING_FOR_SETTLEMENT = 'waiting_for_settlement'
    PENDING_RECONCILIATION = 'pending_reconciliation'
    PENDING_DISBURSEMENT = 'pending_disbursement'
    CHARGEBACK_INITIATED = 'chargeback_initiated'
    CHARGEBACK_RESOLVED = 'chargeback_resolved'
    PENDING_CAPTURE = 'pending_capture'
    CAPTURED = 'captured'
    VOIDED = 'voided'
    IN_QUEUE = 'in_queue'
    MANUAL_INTERVENTION_REQUIRED = 'manual_intervention_required'
    GATEWAY_TIMEOUT = 'gateway_timeout'
    FRAUD_ALERT = 'fraud_alert'
    UNDER_AUDIT = 'under_audit'
    AUDIT_COMPLETED = 'audit_completed'
    CURRENCY_CONVERSION = 'currency_conversion'
    CURRENCY_CONVERSION_COMPLETED = 'currency_conversion_completed'
    ESCALATED = 'escalated'
    DE_ESCALATED = 'de_escalated'
    PENDING_APPROVAL = 'pending_approval'
    APPROVED = 'approved'
    DECLINED = 'declined'
    RE_ATTEMPTED = 're_attempted'
    RE_SCHEDULED = 're_scheduled'
    INSUFFICIENT_FUNDS = 'insufficient_funds'
    VERIFICATION_FAILED = 'verification_failed'
    VERIFICATION_SUCCESSFUL = 'verification_successful'
    PENDING_CLEARANCE = 'pending_clearance'
    CLEARED = 'cleared'
    RE_INITIATED = 're_initiated'
    SPLIT_TRANSACTION = 'split_transaction'
    CONSOLIDATED = 'consolidated'


class Country(Model):
  __tablename__ = "country"
  __table_args__ = (
        Index('country_iso_alpha2_key', 'iso_alpha2', unique=True),
        Index('country_iso_alpha3_key', 'iso_alpha3', unique=True),
        {'comment': 'Country Data needs expansion'},
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  iso_alpha2 = Column(String, nullable=False, comment="2-letter ISO 3166-1 alpha code e.g., US for the United States")
  iso_alpha3 = Column(String, nullable=False, comment="3-letter ISO 3166-1 alpha code e.g., USA for the United States")
  iso_numeric = Column(Integer, comment="ISO 3166-1 numeric code e.g., 840 for the United States")
  fips_code = Column(String, comment="Federal Information Processing Standard code, used by the US government")
  name = Column(String, comment="Full name of the country")
  capital = Column(String, comment="Capital city of the country")
  areainsqkm = Column(Float, comment="Total area of the country in square kilometers")
  population = Column(Integer, comment="Estimated population of the country")
  continent = Column(String, comment="Abbreviation of the continent the country is located in")
  tld = Column(String, comment="Top Level Domain for the country e.g., .us for the United States")
  currencycode = Column(String, comment="ISO code of the country’s currency e.g., USD for US Dollar")
  currencyname = Column(String, comment="Full name of the country’s currency e.g., Dollar for US Dollar")
  phone = Column(String, comment="Country dialing code e.g., +1 for the United States")
  postalcode = Column(String, comment="Template or format of postal codes in the country")
  postalcoderegex = Column(String, comment="Regular expression pattern to validate postal codes")
  languages = Column(String, comment="Commonly spoken languages in the country, represented as ISO codes")
  geo_id_fk = Column(Integer, ForeignKey('geoname.id'), comment="Reference to geoname table; linking country data with geographical name data")
  neighbors = Column(String, comment="Neighboring countries, usually represented as ISO codes")
  equivfipscode = Column(String, comment="Equivalent FIPS code in cases where it might differ from the primary FIPS code")
  flag = Column(Text, comment="Field to store a link or representation of the country’s flag")
  geo = relationship('Geoname', back_populates='country')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Admin1codes(Model):
  __tablename__ = "admin1codes"
  __table_args__ = (
        Index('admin1codes_admin1_code_idx', 'admin1_code'),
        Index('admin1codes_countrycode_id_fk_admin1_code_idx', 'countrycode_id_fk', 'admin1_code'),
        Index('admin1codes_countrycode_id_fk_idx', 'countrycode_id_fk'),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  code = Column(String, comment="Primary identifier, typically a combination of country code and admin1 code e.g., US.AL for Alabama, United States")
  countrycode_id_fk = Column(Integer, ForeignKey('country.id'), comment="3-letter ISO 3166-1 alpha code of the country e.g., USA for the United States")
  admin1_code = Column(String, comment="Unique identifier within a country for this first-level administrative division. E.g., AL for Alabama")
  name = Column(String, comment="Local name of the administrative division in the official language")
  alt_name_english = Column(String, comment="Alternative name or translation of the division in English")
  geo_id_fk = Column(Integer, ForeignKey('geoname.id'), comment="Reference to geoname table; linking administrative division data with geographical name data")
  countrycode = relationship('Country', back_populates='admin1codes')
  geo = relationship('Geoname', back_populates='admin1codes')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Admin2codes(Model):
  __tablename__ = "admin2codes"
  __table_args__ = (
        Index('admin2codes_code_idx', 'code'),
        Index('admin2codes_countrycode_id_fk_admin1_code_idx', 'countrycode_id_fk', 'admin1_code'),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  code = Column(String, comment="Primary identifier, typically a combination of country code, admin1 code, and an additional code representing the second-level administrative division e.g., US.AL.001")
  countrycode_id_fk = Column(Integer, ForeignKey('country.id'), comment="3-letter ISO 3166-1 alpha code of the country this division belongs to e.g., USA for the United States")
  admin1_code = Column(String, comment="ref: > admin1codes.admin1_code,Reference to the first-level administrative division. E.g., US.AL for Alabama in the United States")
  name = Column(String, comment="Local name of the second-level administrative division in the official language")
  alt_name_english = Column(String, comment="Alternative name or translation of the division in English")
  geo_id_fk = Column(Integer, ForeignKey('geoname.id'), comment="Reference to geoname table; linking second-level administrative division data with geographical name data")
  countrycode = relationship('Country', back_populates='admin2codes')
  geo = relationship('Geoname', back_populates='admin2codes')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Featurecodes(Model):
  __tablename__ = "featurecodes"
  __table_args__ = (
        PrimaryKeyConstraint('id', 'code', 'fcode'),
    )
  id = Column(Integer, nullable=False, autoincrement=True)
  code = Column(String, nullable=False, comment="Primary identifier for the feature code, typically a combination of class and fcode")
  fclass = Column(String, comment="Class identifier that categorizes the type of geographical feature e.g., P for populated place, T for mountain")
  fcode = Column(String, nullable=False, comment="Specific code within a class that describes the feature in more detail. E.g., within class P, an fcode might specify city, village, etc.")
  label = Column(String, comment="Short label or name for the feature code")
  description = Column(String, comment="Detailed description of what the feature code represents")

  def __repr__(self):
        return f'<{self.__class__.__name__}(id={self.id}, code={self.code}, fcode={self.fcode})>'


class Languagecodes(Model):
  __tablename__ = "languagecodes"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  iso_639_3 = Column(String, comment="ISO 639-3 code is a three-letter code that represents a specific language uniquely. It offers a comprehensive set of languages.")
  iso_639_2 = Column(String, comment="ISO 639-2 code is a three-letter code, which could be either bibliographic or terminological, representing a set of similar languages.")
  iso_639_1 = Column(String, comment="ISO 639-1 code is a two-letter code. It represents major languages but is not as exhaustive as ISO 639-3.")
  name = Column(String, comment="The descriptive name of the language in English.")

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Currency(Model):
  __tablename__ = "currency"
  __table_args__ = (
        Index('currency_name_idx', 'name', unique=True),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  name = Column(String)
  symbol = Column(String)
  numeric_code = Column(String)
  full_name = Column(String)

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Geoname(Model):
  __tablename__ = "geoname"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True, comment="Unique identifier for each geoname")
  name = Column(String, comment="Local name of the place or location")
  asciiname = Column(String, comment="ASCII version of the name, suitable for URL or systems that dont support unicode")
  alternatenames = Column(Text, comment="Alternative names or variations of the location name, possibly in different languages or scripts")
  latitude = Column(Float, comment="Latitude coordinate of the location")
  longitude = Column(Float, comment="Longitude coordinate of the location")
  fclass = Column(String, comment="Feature class, represents general type/category of the location e.g. P for populated place, A for administrative division")
  fcode = Column(String, comment="Feature code, more specific than feature class, indicating the exact type of feature")
  country = Column(String, comment="ISO-3166 2-letter country code")
  cc2 = Column(String, comment="Alternative country codes if the location is near a border")
  admin1 = Column(String, comment="Primary administrative division, e.g., state in the USA, oblast in Russia")
  admin2 = Column(String, comment="Secondary administrative division, e.g., county in the USA")
  admin3 = Column(String, comment="Tertiary administrative division, specific to each country")
  admin4 = Column(String, comment="Quaternary administrative division, specific to each country")
  population = Column(BigInteger, comment="Population of the location if applicable")
  elevation = Column(Integer, comment="Elevation above sea level in meters")
  gtopo30 = Column(Integer, comment="Digital elevation model, indicates the average elevation of 30x30 area in meters")
  timezone = Column(String, comment="The timezone in which the location lies, based on the IANA Time Zone Database")
  moddate = Column(Date, comment="The last date when the record was modified or updated")

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Timezone(Model):
  __tablename__ = "timezone"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  country_code_id_fk = Column(Integer, ForeignKey('country.id'))
  timezonename = Column(String)
  comments = Column(Text)
  country_code = relationship('Country', back_populates='timezone')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.timezonename}>'


class ContactType(Model):
  __tablename__ = "contact_type"
  __table_args__ = (
        Index('idx_unique_name', 'name', unique=True),
        {'comment': 'phone, mobile, email, messaging, whatsapp, viber, instagram, website, etc'},
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True, comment="Unique identifier for the address type.")
  name = Column(String, nullable=False, comment="Name or type of contact method, e.g., Mobile, Email, WhatsApp.")
  description = Column(Text, comment="Brief description about the address type, providing context or usage scenarios.")
  is_digital = Column(Boolean, default=True, comment="Indicates if the contact method is digital or physical.")
  requires_verification = Column(Boolean, default=False, comment="Indicates if the address type typically requires a verification process, e.g., email confirmation.")
  max_length = Column(Integer, comment="If applicable, the maximum character length of a value of this address type. Useful for validation.")
  icon_url = Column(String, comment="URL or link to an icon or image representing this address type. Useful for UI/UX purposes.")
  created_at = Column(DateTime, comment="Timestamp when the address type was added to the system.")
  updated_at = Column(DateTime, comment="Timestamp when the address type was last updated.")

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Person(Model):
  __tablename__ = "person"
  __table_args__ = (
        Index('person_email_key', 'email', unique=True),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  first_name = Column(String, nullable=False)
  middle_name = Column(String)
  last_name = Column(String, nullable=False)
  full_name = Column(String)
  nick_name = Column(String)
  headline = Column(String)
  location = Column(String)
  summary = Column(Text)
  email = Column(String, nullable=False)
  phone = Column(String)
  date_of_birth = Column(Date)
  city = Column(String)
  state_province = Column(String)
  postal_code = Column(String)
  country = Column(String)
  bio = Column(Text)
  skills_description = Column(Text)
  interests = Column(Text)
  is_volunteer = Column(Boolean, default=False)
  is_staff = Column(Boolean, default=False)
  onboarding_step = Column(Integer)
  profile_completion = Column(Integer)
  last_profile_update = Column(DateTime)
  points = Column(Integer)
  level = Column(Integer)
  social_media_imported = Column(Boolean, default=False)
  person_badges = relationship('PersonBadge', back_populates='person')


  def __repr__(self):
        return f'<{self.__class__.__name__} {{self."{self.first_name} {self.last_name}"}}>'


class Organization(Model):
  __tablename__ = "organization"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  name = Column(String, nullable=False)
  legal_name = Column(String)
  org_type = Column(String, nullable=False)
  status = Column(String, nullable=False)
  industry = Column(String)
  website = Column(String)
  is_verified = Column(Boolean, default=False)
  description = Column(Text)
  mission_statement = Column(Text)
  size = Column(Integer)
  revenue = Column(Numeric)
  founded_date = Column(Date)
  country_of_operation_id_fk = Column(Integer, ForeignKey('country.id'))
  logo = Column(String)
  social_media_links = Column(Text)
  tax_id = Column(String)
  registration_number = Column(String)
  seeking_funding = Column(Boolean, nullable=False)
  providing_funding = Column(Boolean, nullable=False)
  authorized_representative = Column(Boolean, nullable=False)
  legal_structure = Column(String)
  compliance_status = Column(String)
  financial_year_end = Column(Date)
  last_audit_date = Column(Date)
  auditor_name = Column(String)
  phone_number = Column(String)
  email = Column(String)
  address = Column(String)
  city = Column(String)
  state = Column(String)
  country = Column(String)
  postal_code = Column(String)
  board_members = Column(Text)
  governance_structure = Column(Text)
  risk_assessment = Column(Text)
  insurance_coverage = Column(Boolean)
  compliance_certifications = Column(Text)
  ethics_policy = Column(Text)
  sustainability_policy = Column(Text)
  primary_funding_source = Column(Text)
  secondary_funding_source = Column(Text)
  main_areas_of_operation = Column(Text)
  key_programs = Column(Text)
  beneficiary_info = Column(Text)
  major_donors = Column(Text)
  partnerships_affiliations = Column(Text)
  onboarding_step = Column(Integer)
  profile_completion = Column(Integer)
  last_profile_update = Column(DateTime)
  associated_people_id_fk = Column(Integer, ForeignKey('person.id'))
  associated_people = relationship('Person', back_populates='organization')
  country_of_operation = relationship('Country', back_populates='organization')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class OrganizationDocuments(Model):
  __tablename__ = "organization_documents"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id = Column(Integer, ForeignKey('organization.id'), nullable=False)
  document_type = Column(String, nullable=False)
  document_name = Column(String, nullable=False)
  document_path = Column(String, nullable=False)
  upload_date = Column(DateTime, default=func.now())
  organization = relationship('Organization', back_populates='organization_documents')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.document_name}>'


class SocialMediaProfile(Model):
  __tablename__ = "social_media_profile"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'))
  org_id_fk = Column(Integer, ForeignKey('organization.id'))
  platform = Column(String, nullable=False)
  profile_id = Column(String, nullable=False)
  access_token = Column(String)
  refresh_token = Column(String)
  token_expiry = Column(DateTime)
  org = relationship('Organization', back_populates='social_media_profile')
  person = relationship('Person', back_populates='social_media_profile')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.platform}>'


class OrganizationContact(Model):
  __tablename__ = "organization_contact"
  __table_args__ = ({'comment': 'A person at the organization to contact'})
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  person_id_fk = Column(Integer, ForeignKey('person.id'))
  org_email = Column(String)
  org_phone = Column(String)
  position = Column(String)
  department = Column(String)
  start_date = Column(Date)
  end_date = Column(Date)
  is_primary = Column(Boolean, default=False)
  status = Column(String)
  notes = Column(Text)
  organization = relationship('Organization', back_populates='organization_contact')
  person = relationship('Person', back_populates='organization_contact')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.org_email}>'


class ContactApplication(Model):
  __tablename__ = "contact_application"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  position = Column(String)
  message = Column(Text)
  application_date = Column(DateTime, default=func.now())
  status = Column(String)
  review_date = Column(DateTime)
  review_notes = Column(Text)
  organization = relationship('Organization', back_populates='contact_application')
  person = relationship('Person', back_populates='contact_application')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.position}>'


class OrganizationVerification(Model):
  __tablename__ = "organization_verification"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  registration_number = Column(String)
  registration_date = Column(Date)
  registering_authority = Column(String)
  registration_expiry = Column(Date)
  last_verification_date = Column(Date)
  verification_status = Column(String)
  verification_notes = Column(Text)
  organization = relationship('Organization', back_populates='organization_verification')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.registration_number}>'


class OrganizationPrograms(Model):
  __tablename__ = "organization_programs"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id = Column(Integer, ForeignKey('organization.id'), nullable=False)
  program_name = Column(String, nullable=False)
  program_description = Column(Text)
  start_date = Column(Date)
  end_date = Column(Date)
  budget = Column(Numeric)
  impact_assessment = Column(Text)
  organization = relationship('Organization', back_populates='organization_programs')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.program_name}>'


class PersonOrganizationClaim(Model):
  __tablename__ = "person_organization_claim"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id = Column(Integer, ForeignKey('person.id'), nullable=False)
  organization_id = Column(Integer, ForeignKey('organization.id'), nullable=False)
  claim_type = Column(String, comment="e.g., staff, volunteer, board_member")
  status = Column(String, comment="Pending, Approved, Rejected")
  claim_date = Column(DateTime, default=func.now())
  review_date = Column(DateTime)
  organization = relationship('Organization', back_populates='person_organization_claim')
  person = relationship('Person', back_populates='person_organization_claim')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.claim_type}>'


class OrganizationHierarchy(Model):
  __tablename__ = "organization_hierarchy"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  parent_org_id_fk = Column(Integer, ForeignKey('organization.id'))
  child_org_id_fk = Column(Integer, ForeignKey('organization.id'))
  relationship_type = Column(String, comment="e.g., parent, subsidiary, department")
  child_org = relationship('Organization', back_populates='organization_hierarchy')
  parent_org = relationship('Organization', back_populates='organization_hierarchy')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.relationship_type}>'


class OrganizationSdgs(Model):
  __tablename__ = "organization_sdgs"
  __table_args__ = (
        PrimaryKeyConstraint('organization_id_fk', 'sdg'),
    )
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  sdg = Column(String, nullable=False)
  organization = relationship('Organization', back_populates='organization_sdgs')

  def __repr__(self):
        return f'<{self.__class__.__name__}(organization_id_fk={self.organization_id_fk}, sdg={self.sdg})>'


class OrganizationClimateCategories(Model):
  __tablename__ = "organization_climate_categories"
  __table_args__ = (
        PrimaryKeyConstraint('organization_id_fk', 'climate_category'),
    )
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  climate_category = Column(String, nullable=False)
  organization = relationship('Organization', back_populates='organization_climate_categories')

  def __repr__(self):
        return f'<{self.__class__.__name__}(organization_id_fk={self.organization_id_fk}, climate_category={self.climate_category})>'


class OrganizationProfile(Model):
  __tablename__ = "organization_profile"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  funding_focus_areas = Column(Text)
  average_grant_size = Column(Numeric)
  grant_making_process = Column(Text)
  funding_restrictions = Column(Text)
  focus_areas = Column(Text)
  target_beneficiaries = Column(Text)
  geographic_reach = Column(Text)
  years_of_operation = Column(Integer)
  total_beneficiaries_last_year = Column(Integer)
  annual_budget = Column(Numeric)
  num_employees = Column(Integer)
  num_volunteers = Column(Integer)
  last_year_revenue = Column(Numeric)
  last_year_expenditure = Column(Numeric)
  organization = relationship('Organization', back_populates='organization_profile')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.funding_focus_areas}>'


class DocumentSubmission(Model):
  __tablename__ = "document_submission"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  document_type = Column(String)
  document_name = Column(String)
  file_path = Column(String)
  upload_date = Column(DateTime, default=func.now())
  status = Column(String)
  next_status = Column(String)
  review_notes = Column(Text)
  review_date = Column(DateTime)
  organization = relationship('Organization', back_populates='document_submission')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.document_name}>'


class BoardMember(Model):
  __tablename__ = "board_member"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  position = Column(String)
  start_date = Column(Date)
  end_date = Column(Date)
  organization = relationship('Organization', back_populates='board_member')
  person = relationship('Person', back_populates='board_member')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.position}>'


class ExecutivePosition(Model):
  __tablename__ = "executive_position"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  title = Column(String, nullable=False)
  start_date = Column(Date)
  end_date = Column(Date)
  organization = relationship('Organization', back_populates='executive_position')
  person = relationship('Person', back_populates='executive_position')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.title}>'


class Grant(Model):
  __tablename__ = "grant"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  donor_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  recipient_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  amount = Column(Numeric)
  start_date = Column(Date)
  end_date = Column(Date)
  status = Column(String)
  description = Column(Text)
  donor = relationship('Organization', back_populates='grant')
  recipient = relationship('Organization', back_populates='grant')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.description}>'


class Event(Model):
  __tablename__ = "event"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  name = Column(String, nullable=False)
  description = Column(Text)
  start_datetime = Column(DateTime)
  end_datetime = Column(DateTime)
  location = Column(String)
  is_virtual = Column(Boolean, default=False)
  max_participants = Column(Integer)
  organization = relationship('Organization', back_populates='event')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class EventRegistration(Model):
  __tablename__ = "event_registration"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  event_id_fk = Column(Integer, ForeignKey('event.id'), nullable=False)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  registration_date = Column(DateTime, default=func.now())
  attended = Column(Boolean, default=False)
  event = relationship('Event', back_populates='event_registration')
  person = relationship('Person', back_populates='event_registration')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class PersonTraining(Model):
  __tablename__ = "person_training"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  training_id_fk = Column(Integer, ForeignKey('training.id'), nullable=False)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  start_date = Column(Date)
  completion_date = Column(Date)
  completed = Column(Boolean)
  certificate_id = Column(String)
  person = relationship('Person', back_populates='person_training')
  training = relationship('Training', back_populates='person_training')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.certificate_id}>'


class PjFeedback(Model):
  __tablename__ = "pj_feedback"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  project_id_fk = Column(Integer, ForeignKey('project.id'))
  rating = Column(Integer)
  comments = Column(Text)
  notes = Column(Text)
  date = Column(Date)
  organization = relationship('Organization', back_populates='pj_feedback')
  person = relationship('Person', back_populates='pj_feedback')
  project = relationship('Project', back_populates='pj_feedback')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.comments}>'


class Message(Model):
  __tablename__ = "message"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  sender_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  recipient_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  subject = Column(String)
  body = Column(Text)
  sent_date = Column(DateTime, default=func.now())
  read_date = Column(DateTime)
  recipient = relationship('Person', back_populates='message')
  sender = relationship('Person', back_populates='message')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.subject}>'


class Project(Model):
  __tablename__ = "project"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  name = Column(String, nullable=False)
  description = Column(Text)
  start_date = Column(Date)
  end_date = Column(Date)
  budget = Column(Numeric)
  status = Column(String)
  beneficiaries = Column(Integer)
  outcomes = Column(Text)
  organization = relationship('Organization', back_populates='project')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class ProjectLocations(Model):
  __tablename__ = "project_locations"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  project_id_fk = Column(Integer, ForeignKey('project.id'), nullable=False)
  location_name = Column(String)
  location_coordinates_id_fk = Column(Integer, ForeignKey('geoname.id'), comment="PostGIS Point geometry for lat/long")
  location_coordinates = relationship('Geoname', back_populates='project_locations')
  project = relationship('Project', back_populates='project_locations')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.location_name}>'


class VolunteerLog(Model):
  __tablename__ = "volunteer_log"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  start_date = Column(Date)
  end_date = Column(Date)
  hours_contributed = Column(Integer)
  role = Column(String)
  skills_used = Column(Text)
  organization = relationship('Organization', back_populates='volunteer_log')
  person = relationship('Person', back_populates='volunteer_log')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.role}>'


class Training(Model):
  __tablename__ = "training"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  offering_org_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  name = Column(String, nullable=False)
  description = Column(Text)
  start_date = Column(Date)
  end_date = Column(Date)
  is_certified = Column(Boolean, default=False)
  offering_org = relationship('Organization', back_populates='training')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Impact(Model):
  __tablename__ = "impact"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  project_id_fk = Column(Integer, ForeignKey('project.id'))
  metric_name = Column(String, nullable=False)
  value = Column(Numeric)
  unit = Column(String)
  date_measured = Column(Date)
  description = Column(Text)
  organization = relationship('Organization', back_populates='impact')
  project = relationship('Project', back_populates='impact')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.description}>'


class UserActivity(Model):
  __tablename__ = "user_activity"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  activity_type = Column(String)
  timestamp = Column(DateTime, default=func.now())
  details = Column(Text)
  person = relationship('Person', back_populates='user_activity')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.activity_type}>'


class OrganizationTag(Model):
  __tablename__ = "organization_tag"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  tag_id_fk = Column(Integer, ForeignKey('tag.id'), nullable=False)
  organization = relationship('Organization', back_populates='organization_tag')
  tag = relationship('Tag', back_populates='organization_tag')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class OnboardingProgress(Model):
  __tablename__ = "onboarding_progress"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  user_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'))
  step = Column(Integer)
  completed_at = Column(DateTime)
  organization = relationship('Organization', back_populates='onboarding_progress')
  user = relationship('Person', back_populates='onboarding_progress')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class Notification(Model):
  __tablename__ = "notification"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  message = Column(Text)
  notification_type = Column(String)
  created_date = Column(DateTime, default=func.now())
  read_date = Column(DateTime)
  person = relationship('Person', back_populates='notification')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.message}>'


class Report(Model):
  __tablename__ = "report"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  title = Column(String, nullable=False)
  description = Column(Text)
  file_path = Column(String)
  created_date = Column(DateTime, default=func.now())
  report_type = Column(String)
  organization = relationship('Organization', back_populates='report')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.title}>'


class Tag(Model):
  __tablename__ = "tag"
  __table_args__ = (
        Index('tag_name_key', 'name', unique=True),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  name = Column(String, nullable=False)

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class ProjectTag(Model):
  __tablename__ = "project_tag"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  project_id_fk = Column(Integer, ForeignKey('project.id'), nullable=False)
  tag_id_fk = Column(Integer, ForeignKey('tag.id'), nullable=False)
  project = relationship('Project', back_populates='project_tag')
  tag = relationship('Tag', back_populates='project_tag')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class OrganizationBadge(Model):
  __tablename__ = "organization_badge"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  badge_id_fk = Column(Integer, ForeignKey('badge.id'), nullable=False)
  date_earned = Column(DateTime, default=func.now())
  badge = relationship('Badge', back_populates='organization_badge')
  organization = relationship('Organization', back_populates='organization_badge')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class Badge(Model):
  __tablename__ = "badge"
  __table_args__ = (
        Index('badge_name_key', 'name', unique=True),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  name = Column(String, nullable=False)
  description = Column(String)
  criteria = Column(String)
  icon = Column(String)
  person_badges = relationship('PersonBadge', back_populates='badge')


  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class UserGamification(Model):
  __tablename__ = "user_gamification"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  user_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  points = Column(Integer)
  level = Column(Integer)
  last_point_earned = Column(DateTime)
  points_to_next_level = Column(Integer)
  user = relationship('Person', back_populates='user_gamification')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class PersonBadge(Model):
    __tablename__ = 'person_badge'
    person_id_fk = Column(Integer, ForeignKey('person.id'), primary_key=True, nullable=False)
    badge_id_fk = Column(Integer, ForeignKey('badge.id'), primary_key=True, nullable=False)
    date_earned = Column(DateTime, default=func.now())
    badge = relationship('Badge', back_populates='person_badges')
    person = relationship('Person', back_populates='person_badges')

class Leaderboard(Model):
  __tablename__ = "leaderboard"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  score = Column(Integer)
  last_updated = Column(DateTime, default=func.now())
  person = relationship('Person', back_populates='leaderboard')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class PersonSkill(Model):
  __tablename__ = "person_skill"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  skill_id_fk = Column(Integer, ForeignKey('skill.id'), nullable=False)
  proficiency_level = Column(Integer)
  endorsements = Column(Integer)
  person = relationship('Person', back_populates='person_skill')
  skill = relationship('Skill', back_populates='person_skill')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class PersonExperience(Model):
  __tablename__ = "person_experience"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  job_title = Column(String, nullable=False)
  company_name = Column(String, nullable=False)
  location = Column(String)
  start_date = Column(Date, nullable=False)
  end_date = Column(Date)
  description = Column(Text)
  awards = Column(Text)
  person = relationship('Person', back_populates='person_experience')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.description}>'


class PersonEducation(Model):
  __tablename__ = "person_education"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  school_name = Column(String, nullable=False)
  degree = Column(String)
  field_of_study = Column(String)
  start_date = Column(Date, nullable=False)
  end_date = Column(Date)
  description = Column(Text)
  person = relationship('Person', back_populates='person_education')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.description}>'


class PersonCertification(Model):
  __tablename__ = "person_certification"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  name = Column(String, nullable=False)
  issuing_organization = Column(String, nullable=False)
  issue_date = Column(Date, nullable=False)
  expiration_date = Column(Date)
  credential_id = Column(String)
  credential_url = Column(String)
  person = relationship('Person', back_populates='person_certification')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class GamificationChallenge(Model):
  __tablename__ = "gamification_challenge"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  name = Column(String, nullable=False)
  description = Column(Text)
  points_reward = Column(Integer)
  badge_reward_id_fk = Column(Integer, ForeignKey('badge.id'))
  start_date = Column(DateTime)
  end_date = Column(DateTime)
  badge_reward = relationship('Badge', back_populates='gamification_challenge')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class UserChallenge(Model):
  __tablename__ = "user_challenge"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  challenge_id_fk = Column(Integer, ForeignKey('gamification_challenge.id'), nullable=False)
  completed = Column(Boolean, default=False)
  completion_date = Column(DateTime)
  challenge = relationship('GamificationChallenge', back_populates='user_challenge')
  person = relationship('Person', back_populates='user_challenge')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class ProfileUpdateReminder(Model):
  __tablename__ = "profile_update_reminder"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  last_reminder_date = Column(DateTime, default=func.now())
  reminder_count = Column(Integer)
  next_reminder_date = Column(DateTime)
  person = relationship('Person', back_populates='profile_update_reminder')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.id}>'


class PointEarningActivity(Model):
  __tablename__ = "point_earning_activity"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  activity_type = Column(String, nullable=False)
  points_earned = Column(Integer)
  timestamp = Column(DateTime, default=func.now())
  person = relationship('Person', back_populates='point_earning_activity')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.activity_type}>'


class SkillCategory(Model):
  __tablename__ = "skill_category"
  __table_args__ = (
        Index('skill_category_name_key', 'name', unique=True),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  name = Column(String, nullable=False)
  description = Column(Text)

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class PersonPublication(Model):
  __tablename__ = "person_publication"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  title = Column(String, nullable=False)
  publisher = Column(String, nullable=False)
  date = Column(Date, nullable=False)
  url = Column(String)
  description = Column(Text)
  person = relationship('Person', back_populates='person_publication')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.title}>'


class PersonVolunteerExperience(Model):
  __tablename__ = "person_volunteer_experience"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  role = Column(String, nullable=False)
  organization = Column(String, nullable=False)
  cause = Column(String)
  start_date = Column(Date, nullable=False)
  end_date = Column(Date)
  description = Column(Text)
  person = relationship('Person', back_populates='person_volunteer_experience')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.description}>'


class PersonPatent(Model):
  __tablename__ = "person_patent"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  title = Column(String, nullable=False)
  patent_office = Column(String, nullable=False)
  patent_number = Column(String, nullable=False)
  issue_date = Column(Date, nullable=False)
  description = Column(Text)
  person = relationship('Person', back_populates='person_patent')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.title}>'


class PersonCourse(Model):
  __tablename__ = "person_course"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  name = Column(String, nullable=False)
  institution = Column(String, nullable=False)
  completion_date = Column(Date, nullable=False)
  description = Column(Text)
  person = relationship('Person', back_populates='person_course')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class PersonOrganizationMembership(Model):
  __tablename__ = "person_organization_membership"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  organization_name = Column(String, nullable=False)
  role = Column(String, nullable=False)
  start_date = Column(Date, nullable=False)
  end_date = Column(Date)
  description = Column(Text)
  person = relationship('Person', back_populates='person_organization_membership')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.description}>'


class PersonLanguage(Model):
  __tablename__ = "person_language"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  name = Column(String, nullable=False)
  proficiency = Column(String, nullable=False)
  person = relationship('Person', back_populates='person_language')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class PersonHonorAward(Model):
  __tablename__ = "person_honor_award"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  title = Column(String, nullable=False)
  issuer = Column(String, nullable=False)
  date_received = Column(Date, nullable=False)
  description = Column(Text)
  person = relationship('Person', back_populates='person_honor_award')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.title}>'


class Alternatename(Model):
  __tablename__ = "alternatename"
  id = Column(Integer, primary_key=True, nullable=False, comment="Unique identifier for each alternate name entry")
  geo_id_fk = Column(Integer, ForeignKey('geoname.id'), comment="Reference to the geoname table; denotes which location this alternate name pertains to")
  isolanguage = Column(String, comment="ISO language code denoting the language of this alternate name, e.g., en for English")
  alternatename = Column(String, comment="The alternate name itself in the specified language")
  ispreferredname = Column(Boolean, default=False, comment="Indicates if this is the preferred name in the associated language")
  isshortname = Column(Boolean, default=False, comment="Indicates if this name is a short version or abbreviation")
  iscolloquial = Column(Boolean, default=False, comment="Indicates if this name is colloquial or informal")
  ishistoric = Column(Boolean, default=False, comment="Indicates if this name is historic and no longer widely in use")
  name_from = Column(String, comment="Used for transliterations; the script or system from which the name was derived")
  name_to = Column(String, comment="Used for transliterations; the script or system to which the name was translated")
  geo = relationship('Geoname', back_populates='alternatename')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name_from}>'


class Contact(Model):
  __tablename__ = "contact"
  __table_args__ = (
        Index('idx_person_contact', 'person_id_fk', 'contact_type_id_fk'),
        Index('idx_unique_contact', 'contact_value', unique=True),
        {'comment': 'Agent or person contacts'},
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True, comment="Unique identifier for the contact.")
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False, comment="Reference to the individual associated with this contact.")
  contact_type_id_fk = Column(Integer, ForeignKey('contact_type.id'), nullable=False, comment="Reference to the type of contact.")
  contact_value = Column(String, nullable=False, comment="Actual contact value, e.g., phone number or email address.")
  priority = Column(Integer, nullable=False, comment="Ordering priority for displaying or using the contact. Lower value indicates higher priority.")
  best_time_to_contact_start = Column(Time, comment="Preferred start time when the individual/organization is available for contact.")
  best_time_to_contact_end = Column(Time, comment="Preferred end time for availability.")
  active_from_date = Column(DateTime, default=func.now(), comment="Date when this contact became active or relevant.")
  active_to_date = Column(Date, comment="Date when this contact ceases to be active or relevant.")
  for_business_use = Column(Boolean, default=False, comment="Indicates if the contact is primarily for business purposes.")
  for_personal_use = Column(Boolean, default=True, comment="Indicates if the contact is primarily for personal use.")
  do_not_use = Column(Boolean, default=False, comment="Indicates if there are any restrictions or requests not to use this contact.")
  is_active = Column(Boolean, default=True, comment="Indicates if this contact is currently active and usable.")
  is_blocked = Column(Boolean, default=False, comment="Indicates if this contact is blocked, maybe due to spam or other reasons.")
  is_verified = Column(Boolean, default=False, comment="Indicates if this contact has been verified, e.g., via OTP or email confirmation.")
  notes = Column(Text, comment="Additional notes or context about the contact.")
  contact_type = relationship('ContactType', back_populates='contact')
  person = relationship('Person', back_populates='contact')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.contact_value}>'


class OrganizationAward(Model):
  __tablename__ = "organization_award"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  organization_id_fk = Column(Integer, ForeignKey('organization.id'), nullable=False)
  name = Column(String, nullable=False)
  awarding_body = Column(String)
  date_received = Column(Date)
  description = Column(Text)
  organization = relationship('Organization', back_populates='organization_award')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class Skill(Model):
  __tablename__ = "skill"
  __table_args__ = (
        Index('skill_name_key', 'name', unique=True),
    )
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  name = Column(String, nullable=False)
  skill_category_id_fk = Column(Integer, ForeignKey('skill_category.id'), nullable=False)
  description = Column(Text)
  skill_category = relationship('SkillCategory', back_populates='skill')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'


class PersonProject(Model):
  __tablename__ = "person_project"
  id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
  person_id_fk = Column(Integer, ForeignKey('person.id'), nullable=False)
  name = Column(String, nullable=False)
  description = Column(Text)
  start_date = Column(Date, nullable=False)
  end_date = Column(Date)
  project_url = Column(String)
  person = relationship('Person', back_populates='person_project')

  def __repr__(self):
        return f'<{self.__class__.__name__} {self.name}>'

