from datetime import date
from typing import List, Optional

# Constants
CURRENT_YEAR = date.today().year
DOC_HEADER = f"""
# coding: utf-8
# AUTOGENERATED BY appgen
# Copyright (C) Nyimbi Odero, {CURRENT_YEAR}
 
"""

# Model header components
MODEL_IMPORTS = """
import os
import sys
import enum
import inspect
import datetime
import shutil
from datetime import timedelta, datetime, date

from sqlalchemy.orm import relationship, query, defer, deferred, column_property, mapper
from sqlalchemy.schema import FetchedValue
from sqlalchemy.ext.hybrid import hybrid_property, hybrid_method
from sqlalchemy import (Column, Integer, String, ForeignKey,
    Sequence, Float, Text, BigInteger, Date, SmallInteger,
    DateTime, Time, Boolean, Index, CheckConstraint, Interval,
    UniqueConstraint, ForeignKeyConstraint, PrimaryKeyConstraint, Numeric, LargeBinary, Table, func, Enum,
    text)

from sqlalchemy.dialects.postgresql import *
from sqlalchemy.dialects.postgresql import (
    ARRAY, BIGINT, BIT, BOOLEAN, BYTEA, CHAR, CIDR, DATE,
    DOUBLE_PRECISION, ENUM, FLOAT, HSTORE, INET, INTEGER,
    INTERVAL, JSON, JSONB, MACADDR, NUMERIC, OID, REAL, SMALLINT, TEXT,
    TIME, TIMESTAMP, UUID, VARCHAR, INT4RANGE, INT8RANGE, NUMRANGE,
    DATERANGE, TSRANGE, TSTZRANGE, TSVECTOR, aggregate_order_by )

from flask_appbuilder import Model
from flask_appbuilder.models.mixins import AuditMixin, FileColumn, ImageColumn, UserExtensionMixin
from flask_appbuilder.filemanager import ImageManager
from flask_appbuilder.models.decorators import renders

from sqlalchemy_utils import aggregated, force_auto_coercion, observes
from sqlalchemy_utils.types import TSVectorType
from sqlalchemy.ext.associationproxy import association_proxy

from geoalchemy2 import Geometry
"""

# View header components
VIEW_IMPORTS = """
import calendar
from flask import redirect, flash, url_for, request, jsonify, current_app, g, Markup
from flask import render_template
from flask_appbuilder.models.sqla.interface import SQLAInterface
from flask_appbuilder.views import ModelView, BaseView, MasterDetailView, MultipleView, RestCRUDView, CompactCRUDMixin
from flask_appbuilder import ModelView, ModelRestApi, CompactCRUDMixin, aggregate_count, action, expose, BaseView, has_access
from flask_appbuilder.charts.views import ChartView, TimeChartView, GroupByChartView
from flask_appbuilder.models.group import aggregate_count
from flask_appbuilder.widgets import ListThumbnail, ListWidget
from flask_appbuilder.widgets import FormVerticalWidget, FormInlineWidget, FormHorizontalWidget, ShowBlockWidget
from flask_appbuilder.models.sqla.filters import FilterStartsWith, FilterEqualFunction as FA
"""

VIEW_UTILITIES = """
def pretty_month_year(value):
    return calendar.month_name[value.month] + ' ' + str(value.year)

def pretty_year(value):
    return str(value.year)

def get_user():
    return g.user
"""

# API header components
API_IMPORTS = """
from flask_appbuilder import ModelRestApi
from flask_appbuilder.models.sqla.interface import SQLAInterface
from flask_appbuilder.api import BaseApi, expose
from flask_appbuilder.models.filters import BaseFilter
from sqlalchemy import or_
from sqlalchemy.sql import text

from . import appbuilder, db
from .models import *
"""

def gen_model_header() -> List[str]:
    """Generate the header for the models file."""
    return [
        DOC_HEADER,
        MODEL_IMPORTS
    ]

def gen_view_header() -> List[str]:
    """Generate the header for the views file."""
    return [
        DOC_HEADER,
        VIEW_IMPORTS,
        VIEW_UTILITIES
    ]

def gen_api_header() -> List[str]:
    """Generate the header for the API file."""
    return [
        DOC_HEADER,
        API_IMPORTS
    ]

def gen_photo_column(column_name: str, table_class: str) -> str:
    """Generate code for a photo column."""
    return f"""
    {column_name} = Column(ImageColumn(size=(300, 300, True), thumbnail_size=(30, 30, True)))
    
    def {column_name}(self):
        im = ImageManager()
        if self.{column_name}:
            return Markup('<a href="' + url_for('{table_class}ModelView.show', pk=str(self.id)) +
             '" class="thumbnail"><img src="' + im.get_url(self.photo) +
              '" alt="Photo" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for('{table_class}ModelView.show', pk=str(self.id)) +
             '" class="thumbnail"><img src="//:0" alt="Photo" class="img-responsive"></a>')

    def {column_name}_thumbnail(self):
        im = ImageManager()
        if self.photo:
            return Markup('<a href="' + url_for('{table_class}ModelView.show', pk=str(self.id)) +
             '" class="thumbnail"><img src="' + im.get_url_thumbnail(self.photo) +
              '" alt="{column_name}" class="img-rounded img-responsive"></a>')
        else:
            return Markup('<a href="' + url_for('{table_class}ModelView.show', pk=str(self.id)) +
             '" class="thumbnail"><img src="//:0" alt="{column_name}" class="img-responsive"></a>')
    """

def gen_file_column(column_name: str, table_class: str) -> str:
    """Generate code for a file column."""
    return f"""
    {column_name} = Column(FileColumn, nullable=False)
    
    def download(self):
        return Markup(
            '<a href="' + url_for('{table_class}ModelView.download', filename=str(self.file)) + '">Download</a>'
        )
    """

# Add more generator functions for other components as needed

def gen_view_body(class_name: str, snk_table_name: str, tbl_columns: List[str], rt_fld_set: str, rt_cols: List[str], lbl_cols: dict) -> str:
    """Generate the body of a view class."""
    return f"""
class {class_name}ModelView(ModelView):
    datamodel = SQLAInterface({class_name})

    add_title = 'Add {snk_table_name}'
    edit_title = 'Edit {snk_table_name}'
    list_title = '{snk_table_name} List'
    show_title = 'Show {snk_table_name}'

    # Uncomment and modify these lines as needed
    # add_columns = {tbl_columns}
    # edit_columns = {tbl_columns}
    # list_columns = {tbl_columns}
    # show_columns = {tbl_columns}
    # add_fieldset = {rt_fld_set}
    # edit_fieldset = {rt_fld_set}
    # search_columns = {rt_cols} + {tbl_columns}
    # label_columns = {lbl_cols}
    """

# You can add more functions for generating other parts of the views, APIs, etc.

