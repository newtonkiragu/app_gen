
# coding: utf-8
# AUTOGENERATED BY appgen 
# Copyright (C) Nyimbi Odero, 2024 


 
import graphene
from graphene_sqlalchemy import SQLAlchemyObjectType, SQLAlchemyConnectionField
from graphene import relay
from flask_graphql import GraphQLView

from flask_appbuilder.security.sqla.models import User, Role, Permission, PermissionView, RegisterUser
from .models import *
from . import app

t_soil_texture_gql = graphene.Enum.from_enum(t_soil_texture)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_payment_method_gql = graphene.Enum.from_enum(t_payment_method)
t_lesson_level_gql = graphene.Enum.from_enum(t_lesson_level)
t_person_role_gql = graphene.Enum.from_enum(t_person_role)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_animal_type_gql = graphene.Enum.from_enum(t_animal_type)
t_lesson_level_gql = graphene.Enum.from_enum(t_lesson_level)
t_amortization_method_gql = graphene.Enum.from_enum(t_amortization_method)
t_language_proficiency_level_gql = graphene.Enum.from_enum(t_language_proficiency_level)
t_language_proficiency_level_gql = graphene.Enum.from_enum(t_language_proficiency_level)
t_language_proficiency_level_gql = graphene.Enum.from_enum(t_language_proficiency_level)
t_relationship_type_gql = graphene.Enum.from_enum(t_relationship_type)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_geofence_trigger_gql = graphene.Enum.from_enum(t_geofence_trigger)
t_engagement_type_gql = graphene.Enum.from_enum(t_engagement_type)
t_share_platform_gql = graphene.Enum.from_enum(t_share_platform)
t_lesson_difficulty_feedback_gql = graphene.Enum.from_enum(t_lesson_difficulty_feedback)
t_gender_gql = graphene.Enum.from_enum(t_gender)
t_animal_type_gql = graphene.Enum.from_enum(t_animal_type)
t_org_type_gql = graphene.Enum.from_enum(t_org_type)
t_doc_verification_status_gql = graphene.Enum.from_enum(t_doc_verification_status)
t_admin_level_gql = graphene.Enum.from_enum(t_admin_level)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_account_classification_gql = graphene.Enum.from_enum(t_account_classification)
t_account_normal_side_gql = graphene.Enum.from_enum(t_account_normal_side)
t_account_usage_gql = graphene.Enum.from_enum(t_account_usage)
t_account_type_gql = graphene.Enum.from_enum(t_account_type)
t_account_category_gql = graphene.Enum.from_enum(t_account_category)
t_closure_type_gql = graphene.Enum.from_enum(t_closure_type)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_doc_status_gql = graphene.Enum.from_enum(t_doc_status)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_closure_type_gql = graphene.Enum.from_enum(t_closure_type)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_payment_method_gql = graphene.Enum.from_enum(t_payment_method)
t_account_transaction_type_gql = graphene.Enum.from_enum(t_account_transaction_type)
t_transaction_source_gql = graphene.Enum.from_enum(t_transaction_source)
t_account_type_gql = graphene.Enum.from_enum(t_account_type)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_soil_texture_gql = graphene.Enum.from_enum(t_soil_texture)
t_land_use_gql = graphene.Enum.from_enum(t_land_use)
t_water_source_gql = graphene.Enum.from_enum(t_water_source)
t_amortization_method_gql = graphene.Enum.from_enum(t_amortization_method)
t_pipeline_stages_gql = graphene.Enum.from_enum(t_pipeline_stages)
t_product_return_action_gql = graphene.Enum.from_enum(t_product_return_action)
t_product_return_reason_gql = graphene.Enum.from_enum(t_product_return_reason)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_remind_by_enum_gql = graphene.Enum.from_enum(t_remind_by_enum)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_payment_method_gql = graphene.Enum.from_enum(t_payment_method)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_improvement_type_gql = graphene.Enum.from_enum(t_improvement_type)
t_land_use_gql = graphene.Enum.from_enum(t_land_use)
t_recommendation_category_gql = graphene.Enum.from_enum(t_recommendation_category)
t_transaction_status_gql = graphene.Enum.from_enum(t_transaction_status)
t_loan_sub_status_gql = graphene.Enum.from_enum(t_loan_sub_status)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_interest_method_gql = graphene.Enum.from_enum(t_interest_method)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_amortization_method_gql = graphene.Enum.from_enum(t_amortization_method)
t_pipeline_stages_gql = graphene.Enum.from_enum(t_pipeline_stages)
t_doc_status_gql = graphene.Enum.from_enum(t_doc_status)
t_soil_texture_gql = graphene.Enum.from_enum(t_soil_texture)
t_doc_status_gql = graphene.Enum.from_enum(t_doc_status)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_guarantor_type_gql = graphene.Enum.from_enum(t_guarantor_type)
t_interval_gql = graphene.Enum.from_enum(t_interval)
t_waypoint_audit_action_gql = graphene.Enum.from_enum(t_waypoint_audit_action)
t_severity_level_gql = graphene.Enum.from_enum(t_severity_level)


class TechParametersGql(SQLAlchemyObjectType):
    class Meta:
        model = TechParameters
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class BadgeGql(SQLAlchemyObjectType):
    class Meta:
        model = Badge
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class ContactTypeGql(SQLAlchemyObjectType):
    class Meta:
        model = ContactType
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CropGql(SQLAlchemyObjectType):
    class Meta:
        model = Crop
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    optimal_soil_texture = graphene.Field(t_soil_texture_gql)
    drought_tolerance = graphene.Field(t_severity_level_gql)

class CurrencyGql(SQLAlchemyObjectType):
    class Meta:
        model = Currency
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class DiseaseGql(SQLAlchemyObjectType):
    class Meta:
        model = Disease
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class DocTypeGql(SQLAlchemyObjectType):
    class Meta:
        model = DocType
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class FeaturecodesGql(SQLAlchemyObjectType):
    class Meta:
        model = Featurecodes
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class GeonameGql(SQLAlchemyObjectType):
    class Meta:
        model = Geoname
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class IsicSectionGql(SQLAlchemyObjectType):
    class Meta:
        model = IsicSection
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LanguagecodesGql(SQLAlchemyObjectType):
    class Meta:
        model = Languagecodes
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LoanTransactionGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanTransaction
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    payment_method = graphene.Field(t_payment_method_gql)

class LoanTransactionStrategyGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanTransactionStrategy
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class MimeTypeGql(SQLAlchemyObjectType):
    class Meta:
        model = MimeType
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class MimeTypeMapGql(SQLAlchemyObjectType):
    class Meta:
        model = MimeTypeMap
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class ModuleGql(SQLAlchemyObjectType):
    class Meta:
        model = Module
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    module_level = graphene.Field(t_lesson_level_gql)

class PersonGql(SQLAlchemyObjectType):
    class Meta:
        model = Person
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    person_role = graphene.Field(t_person_role_gql)
    join_status = graphene.Field(t_transaction_status_gql)

class PestGql(SQLAlchemyObjectType):
    class Meta:
        model = Pest
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class ProductClassGql(SQLAlchemyObjectType):
    class Meta:
        model = ProductClass
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class SpatialRefSysGql(SQLAlchemyObjectType):
    class Meta:
        model = SpatialRefSys
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class TopologyGql(SQLAlchemyObjectType):
    class Meta:
        model = Topology
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class UsGazGql(SQLAlchemyObjectType):
    class Meta:
        model = UsGaz
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class UsLexGql(SQLAlchemyObjectType):
    class Meta:
        model = UsLex
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class UsRulesGql(SQLAlchemyObjectType):
    class Meta:
        model = UsRules
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonLearnerGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonLearner
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class AlternatenameGql(SQLAlchemyObjectType):
    class Meta:
        model = Alternatename
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CountryGql(SQLAlchemyObjectType):
    class Meta:
        model = Country
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CropDiseaseLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = CropDiseaseLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    severity = graphene.Field(t_severity_level_gql)

class CropPestLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = CropPestLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    severity = graphene.Field(t_severity_level_gql)

class CropVarietyGql(SQLAlchemyObjectType):
    class Meta:
        model = CropVariety
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    drought_tolerance = graphene.Field(t_severity_level_gql)
    salinity_tolerance = graphene.Field(t_severity_level_gql)
    herbicide_tolerance = graphene.Field(t_severity_level_gql)

class HerdGql(SQLAlchemyObjectType):
    class Meta:
        model = Herd
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    dominant_species = graphene.Field(t_animal_type_gql)

class IsicDivisionGql(SQLAlchemyObjectType):
    class Meta:
        model = IsicDivision
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LayerGql(SQLAlchemyObjectType):
    class Meta:
        model = Layer
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LeaderboardGql(SQLAlchemyObjectType):
    class Meta:
        model = Leaderboard
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LearningPathGql(SQLAlchemyObjectType):
    class Meta:
        model = LearningPath
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LessonGql(SQLAlchemyObjectType):
    class Meta:
        model = Lesson
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    lesson_level = graphene.Field(t_lesson_level_gql)

class LoanTransactionRuleGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanTransactionRule
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    rule_type = graphene.Field(t_amortization_method_gql)

class PersonAdminDataGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonAdminData
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonBadgesGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonBadges
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonEducationGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonEducation
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonHouseholdGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonHousehold
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonLanguageGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonLanguage
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    listening_proficiency_level = graphene.Field(t_language_proficiency_level_gql)
    spoken_proficiency_level = graphene.Field(t_language_proficiency_level_gql)
    written_proficiency_level = graphene.Field(t_language_proficiency_level_gql)

class PersonLevelGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonLevel
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonLifeEventGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonLifeEvent
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonLocationLogGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonLocationLog
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonRelationshipsLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonRelationshipsLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    relationship_type = graphene.Field(t_relationship_type_gql)

class PersonTodoGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonTodo
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    priority_level = graphene.Field(t_severity_level_gql)
    status = graphene.Field(t_transaction_status_gql)
    geofence_trigger = graphene.Field(t_geofence_trigger_gql)

class SourceDocumentGql(SQLAlchemyObjectType):
    class Meta:
        model = SourceDocument
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class UserPointsGql(SQLAlchemyObjectType):
    class Meta:
        model = UserPoints
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class Admin1codesGql(SQLAlchemyObjectType):
    class Meta:
        model = Admin1codes
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class Admin2codesGql(SQLAlchemyObjectType):
    class Meta:
        model = Admin2codes
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class AnimalBreedGql(SQLAlchemyObjectType):
    class Meta:
        model = AnimalBreed
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class ContentGql(SQLAlchemyObjectType):
    class Meta:
        model = Content
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class IsicGroupGql(SQLAlchemyObjectType):
    class Meta:
        model = IsicGroup
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LearningPathContentGql(SQLAlchemyObjectType):
    class Meta:
        model = LearningPathContent
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LessonEngagementGql(SQLAlchemyObjectType):
    class Meta:
        model = LessonEngagement
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    engagement_type = graphene.Field(t_engagement_type_gql)
    shared_to_platform = graphene.Field(t_share_platform_gql)
    difficulty_feedback = graphene.Field(t_lesson_difficulty_feedback_gql)

class PersonAdditionalDataGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonAdditionalData
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    Gender = graphene.Field(t_gender_gql)

class QuizGql(SQLAlchemyObjectType):
    class Meta:
        model = Quiz
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class TimezoneGql(SQLAlchemyObjectType):
    class Meta:
        model = Timezone
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class AnimalGql(SQLAlchemyObjectType):
    class Meta:
        model = Animal
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    animal_type = graphene.Field(t_animal_type_gql)

class ContentRecommendationsGql(SQLAlchemyObjectType):
    class Meta:
        model = ContentRecommendations
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class IsicClassGql(SQLAlchemyObjectType):
    class Meta:
        model = IsicClass
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LessonContentLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = LessonContentLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class OrgGql(SQLAlchemyObjectType):
    class Meta:
        model = Org
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    org_type = graphene.Field(t_org_type_gql)
    org_reg_status = graphene.Field(t_doc_verification_status_gql)
    op_level = graphene.Field(t_admin_level_gql)

class QuizQuestionGql(SQLAlchemyObjectType):
    class Meta:
        model = QuizQuestion
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PurchaseOrderGql(SQLAlchemyObjectType):
    class Meta:
        model = PurchaseOrder
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    status = graphene.Field(t_transaction_status_gql)

class SalesOrderGql(SQLAlchemyObjectType):
    class Meta:
        model = SalesOrder
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    status = graphene.Field(t_transaction_status_gql)

class AccGlAccountGql(SQLAlchemyObjectType):
    class Meta:
        model = AccGlAccount
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    classification = graphene.Field(t_account_classification_gql)
    normal_side = graphene.Field(t_account_normal_side_gql)
    account_usage = graphene.Field(t_account_usage_gql)
    account_type = graphene.Field(t_account_type_gql)
    account_category = graphene.Field(t_account_category_gql)

class AccGlClosureGql(SQLAlchemyObjectType):
    class Meta:
        model = AccGlClosure
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    closure_type = graphene.Field(t_closure_type_gql)

class AnimalHealthGql(SQLAlchemyObjectType):
    class Meta:
        model = AnimalHealth
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CalendarGql(SQLAlchemyObjectType):
    class Meta:
        model = Calendar
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    duration_unit = graphene.Field(t_interval_gql)

class ContactGql(SQLAlchemyObjectType):
    class Meta:
        model = Contact
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class DocGql(SQLAlchemyObjectType):
    class Meta:
        model = Doc
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class FundGql(SQLAlchemyObjectType):
    class Meta:
        model = Fund
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class HerdAnimalLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = HerdAnimalLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LoanRiskAnalysisGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanRiskAnalysis
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LtagBatchGql(SQLAlchemyObjectType):
    class Meta:
        model = LtagBatch
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class OpportunityGql(SQLAlchemyObjectType):
    class Meta:
        model = Opportunity
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class OrgPeopleLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = OrgPeopleLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class OrgSuppliesLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = OrgSuppliesLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PersonEmploymentGql(SQLAlchemyObjectType):
    class Meta:
        model = PersonEmployment
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PipelineGql(SQLAlchemyObjectType):
    class Meta:
        model = Pipeline
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class ProductSkuLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = ProductSkuLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class QuoteGql(SQLAlchemyObjectType):
    class Meta:
        model = Quote
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    quote_status = graphene.Field(t_doc_status_gql)

class ScoringModelGql(SQLAlchemyObjectType):
    class Meta:
        model = ScoringModel
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class SupplierParamGql(SQLAlchemyObjectType):
    class Meta:
        model = SupplierParam
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class UserResponseGql(SQLAlchemyObjectType):
    class Meta:
        model = UserResponse
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class WarehouseGql(SQLAlchemyObjectType):
    class Meta:
        model = Warehouse
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PurchaseOrderDetailsGql(SQLAlchemyObjectType):
    class Meta:
        model = PurchaseOrderDetails
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    status = graphene.Field(t_transaction_status_gql)

class SalesOrderDetailsGql(SQLAlchemyObjectType):
    class Meta:
        model = SalesOrderDetails
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    status = graphene.Field(t_transaction_status_gql)

class AccBalancesGql(SQLAlchemyObjectType):
    class Meta:
        model = AccBalances
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    closure_type = graphene.Field(t_closure_type_gql)

class AccGlJournalEntryGql(SQLAlchemyObjectType):
    class Meta:
        model = AccGlJournalEntry
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    trans_status = graphene.Field(t_transaction_status_gql)
    payment_mode = graphene.Field(t_payment_method_gql)
    transaction_type = graphene.Field(t_account_transaction_type_gql)
    transaction_source = graphene.Field(t_transaction_source_gql)

class AccProductLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = AccProductLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    financial_account_type = graphene.Field(t_account_type_gql)

class AisleGql(SQLAlchemyObjectType):
    class Meta:
        model = Aisle
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CalendarEventGql(SQLAlchemyObjectType):
    class Meta:
        model = CalendarEvent
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    duration = graphene.Field(t_interval_gql)
    priority = graphene.Field(t_severity_level_gql)
    status = graphene.Field(t_transaction_status_gql)

class InventoryOrderMapGql(SQLAlchemyObjectType):
    class Meta:
        model = InventoryOrderMap
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    status = graphene.Field(t_transaction_status_gql)

class InvoiceGql(SQLAlchemyObjectType):
    class Meta:
        model = Invoice
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    invoice_status = graphene.Field(t_transaction_status_gql)

class LandParcelGql(SQLAlchemyObjectType):
    class Meta:
        model = LandParcel
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    soil_type = graphene.Field(t_soil_texture_gql)
    land_use = graphene.Field(t_land_use_gql)
    water_source = graphene.Field(t_water_source_gql)

class LeadScoreGql(SQLAlchemyObjectType):
    class Meta:
        model = LeadScore
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LoanProductGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanProduct
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    amortization_method_enum = graphene.Field(t_amortization_method_gql)

class LtagGql(SQLAlchemyObjectType):
    class Meta:
        model = Ltag
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class OpportunityContactLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = OpportunityContactLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class OpportunityIsicClassLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = OpportunityIsicClassLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PipelineStagesGql(SQLAlchemyObjectType):
    class Meta:
        model = PipelineStages
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    pipeline_stage = graphene.Field(t_pipeline_stages_gql)

class ProductReturnGql(SQLAlchemyObjectType):
    class Meta:
        model = ProductReturn
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    return_action = graphene.Field(t_product_return_action_gql)
    return_reason = graphene.Field(t_product_return_reason_gql)

class QuoteDetailsGql(SQLAlchemyObjectType):
    class Meta:
        model = QuoteDetails
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CalendarEventAttachmentGql(SQLAlchemyObjectType):
    class Meta:
        model = CalendarEventAttachment
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CalendarEventAttendeeGql(SQLAlchemyObjectType):
    class Meta:
        model = CalendarEventAttendee
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CalendarEventRecurrenceGql(SQLAlchemyObjectType):
    class Meta:
        model = CalendarEventRecurrence
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class CalendarEventRemindersGql(SQLAlchemyObjectType):
    class Meta:
        model = CalendarEventReminders
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    reminder_interval_type = graphene.Field(t_interval_gql)
    remind_by = graphene.Field(t_remind_by_enum_gql)
    trigger_type = graphene.Field(t_interval_gql)
    duration = graphene.Field(t_interval_gql)

class InventoryOrderDetailGql(SQLAlchemyObjectType):
    class Meta:
        model = InventoryOrderDetail
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class InvoiceDetailsGql(SQLAlchemyObjectType):
    class Meta:
        model = InvoiceDetails
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class InvoicePaymentsGql(SQLAlchemyObjectType):
    class Meta:
        model = InvoicePayments
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    payment_method = graphene.Field(t_payment_method_gql)
    invoice_status = graphene.Field(t_transaction_status_gql)

class LandImprovementsGql(SQLAlchemyObjectType):
    class Meta:
        model = LandImprovements
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    improvement_type = graphene.Field(t_improvement_type_gql)

class LandOwnershipHistoryGql(SQLAlchemyObjectType):
    class Meta:
        model = LandOwnershipHistory
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LandUseHistoryGql(SQLAlchemyObjectType):
    class Meta:
        model = LandUseHistory
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    used_for = graphene.Field(t_land_use_gql)

class LandUseRecommendationsGql(SQLAlchemyObjectType):
    class Meta:
        model = LandUseRecommendations
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    category = graphene.Field(t_recommendation_category_gql)

class LoanGql(SQLAlchemyObjectType):
    class Meta:
        model = Loan
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    loan_status = graphene.Field(t_transaction_status_gql)
    loan_sub_status = graphene.Field(t_loan_sub_status_gql)
    interest_period_frequency = graphene.Field(t_interval_gql)
    interest_method = graphene.Field(t_interest_method_gql)
    interest_calculated_in_period = graphene.Field(t_interval_gql)
    term_frequency = graphene.Field(t_interval_gql)
    repay_every = graphene.Field(t_interval_gql)
    amortization_method = graphene.Field(t_amortization_method_gql)

class LoanProductStrategyOverrideGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanProductStrategyOverride
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class OpportunityPipelineStageLinkGql(SQLAlchemyObjectType):
    class Meta:
        model = OpportunityPipelineStageLink
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    pipeline_stage = graphene.Field(t_pipeline_stages_gql)
    status = graphene.Field(t_doc_status_gql)

class RackGql(SQLAlchemyObjectType):
    class Meta:
        model = Rack
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class SoilTestsGql(SQLAlchemyObjectType):
    class Meta:
        model = SoilTests
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    texture = graphene.Field(t_soil_texture_gql)

class WaypointGql(SQLAlchemyObjectType):
    class Meta:
        model = Waypoint
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LoanArrearsAgingGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanArrearsAging
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    notification_status = graphene.Field(t_doc_status_gql)

class LoanChargeGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanCharge
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    charge_time = graphene.Field(t_interval_gql)
    charge_calculation = graphene.Field(t_interval_gql)

class LoanCollateralGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanCollateral
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LoanGuarantorGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanGuarantor
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    guarantor_type = graphene.Field(t_guarantor_type_gql)

class LoanOfficerAssignmentHistoryGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanOfficerAssignmentHistory
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class LoanRepaymentScheduleGql(SQLAlchemyObjectType):
    class Meta:
        model = LoanRepaymentSchedule
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    repayment_interval = graphene.Field(t_interval_gql)

class ShelfGql(SQLAlchemyObjectType):
    class Meta:
        model = Shelf
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class WaypointAuditGql(SQLAlchemyObjectType):
    class Meta:
        model = WaypointAudit
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    action = graphene.Field(t_waypoint_audit_action_gql)

class BinGql(SQLAlchemyObjectType):
    class Meta:
        model = Bin
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class InventoryGql(SQLAlchemyObjectType):
    class Meta:
        model = Inventory
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class InventoryLogGql(SQLAlchemyObjectType):
    class Meta:
        model = InventoryLog
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class PerishableItemAlertsGql(SQLAlchemyObjectType):
    class Meta:
        model = PerishableItemAlerts
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        

    alert_level = graphene.Field(t_severity_level_gql)

class SerializedItemsGql(SQLAlchemyObjectType):
    class Meta:
        model = SerializedItems
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class InventorySerialLogGql(SQLAlchemyObjectType):
    class Meta:
        model = InventorySerialLog
        interfaces = (relay.Node, )
        # use `only_fields` to only expose specific fields ie "name"
        # only_fields = ("name",)
        # use `exclude_fields` to exclude specific fields ie "last_name"
        # exclude_fields = (,)
        


class Query(graphene.ObjectType):
    node = relay.Node.Field()
    # Allows sorting over multiple TechParameterscolumns, by default over the primary key
    all_tech_parameters = SQLAlchemyConnectionField(TechParametersGql.connection) #sort=TechParametersGql.sort_argument())
    # Allows sorting over multiple Badgecolumns, by default over the primary key
    all_badge = SQLAlchemyConnectionField(BadgeGql.connection) #sort=BadgeGql.sort_argument())
    # Allows sorting over multiple ContactTypecolumns, by default over the primary key
    all_contact_type = SQLAlchemyConnectionField(ContactTypeGql.connection) #sort=ContactTypeGql.sort_argument())
    # Allows sorting over multiple Cropcolumns, by default over the primary key
    all_crop = SQLAlchemyConnectionField(CropGql.connection) #sort=CropGql.sort_argument())
    # Allows sorting over multiple Currencycolumns, by default over the primary key
    all_currency = SQLAlchemyConnectionField(CurrencyGql.connection) #sort=CurrencyGql.sort_argument())
    # Allows sorting over multiple Diseasecolumns, by default over the primary key
    all_disease = SQLAlchemyConnectionField(DiseaseGql.connection) #sort=DiseaseGql.sort_argument())
    # Allows sorting over multiple DocTypecolumns, by default over the primary key
    all_doc_type = SQLAlchemyConnectionField(DocTypeGql.connection) #sort=DocTypeGql.sort_argument())
    # Allows sorting over multiple Featurecodescolumns, by default over the primary key
    all_featurecodes = SQLAlchemyConnectionField(FeaturecodesGql.connection) #sort=FeaturecodesGql.sort_argument())
    # Allows sorting over multiple Geonamecolumns, by default over the primary key
    all_geoname = SQLAlchemyConnectionField(GeonameGql.connection) #sort=GeonameGql.sort_argument())
    # Allows sorting over multiple IsicSectioncolumns, by default over the primary key
    all_isic_section = SQLAlchemyConnectionField(IsicSectionGql.connection) #sort=IsicSectionGql.sort_argument())
    # Allows sorting over multiple Languagecodescolumns, by default over the primary key
    all_languagecodes = SQLAlchemyConnectionField(LanguagecodesGql.connection) #sort=LanguagecodesGql.sort_argument())
    # Allows sorting over multiple LoanTransactioncolumns, by default over the primary key
    all_loan_transaction = SQLAlchemyConnectionField(LoanTransactionGql.connection) #sort=LoanTransactionGql.sort_argument())
    # Allows sorting over multiple LoanTransactionStrategycolumns, by default over the primary key
    all_loan_transaction_strategy = SQLAlchemyConnectionField(LoanTransactionStrategyGql.connection) #sort=LoanTransactionStrategyGql.sort_argument())
    # Allows sorting over multiple MimeTypecolumns, by default over the primary key
    all_mime_type = SQLAlchemyConnectionField(MimeTypeGql.connection) #sort=MimeTypeGql.sort_argument())
    # Allows sorting over multiple MimeTypeMapcolumns, by default over the primary key
    all_mime_type_map = SQLAlchemyConnectionField(MimeTypeMapGql.connection) #sort=MimeTypeMapGql.sort_argument())
    # Allows sorting over multiple Modulecolumns, by default over the primary key
    all_module = SQLAlchemyConnectionField(ModuleGql.connection) #sort=ModuleGql.sort_argument())
    # Allows sorting over multiple Personcolumns, by default over the primary key
    all_person = SQLAlchemyConnectionField(PersonGql.connection) #sort=PersonGql.sort_argument())
    # Allows sorting over multiple Pestcolumns, by default over the primary key
    all_pest = SQLAlchemyConnectionField(PestGql.connection) #sort=PestGql.sort_argument())
    # Allows sorting over multiple ProductClasscolumns, by default over the primary key
    all_product_class = SQLAlchemyConnectionField(ProductClassGql.connection) #sort=ProductClassGql.sort_argument())
    # Allows sorting over multiple SpatialRefSyscolumns, by default over the primary key
    all_spatial_ref_sys = SQLAlchemyConnectionField(SpatialRefSysGql.connection) #sort=SpatialRefSysGql.sort_argument())
    # Allows sorting over multiple Topologycolumns, by default over the primary key
    all_topology = SQLAlchemyConnectionField(TopologyGql.connection) #sort=TopologyGql.sort_argument())
    # Allows sorting over multiple UsGazcolumns, by default over the primary key
    all_us_gaz = SQLAlchemyConnectionField(UsGazGql.connection) #sort=UsGazGql.sort_argument())
    # Allows sorting over multiple UsLexcolumns, by default over the primary key
    all_us_lex = SQLAlchemyConnectionField(UsLexGql.connection) #sort=UsLexGql.sort_argument())
    # Allows sorting over multiple UsRulescolumns, by default over the primary key
    all_us_rules = SQLAlchemyConnectionField(UsRulesGql.connection) #sort=UsRulesGql.sort_argument())
    # Allows sorting over multiple PersonLearnercolumns, by default over the primary key
    all_person_learner = SQLAlchemyConnectionField(PersonLearnerGql.connection) #sort=PersonLearnerGql.sort_argument())
    # Allows sorting over multiple Alternatenamecolumns, by default over the primary key
    all_alternatename = SQLAlchemyConnectionField(AlternatenameGql.connection) #sort=AlternatenameGql.sort_argument())
    # Allows sorting over multiple Countrycolumns, by default over the primary key
    all_country = SQLAlchemyConnectionField(CountryGql.connection) #sort=CountryGql.sort_argument())
    # Allows sorting over multiple CropDiseaseLinkcolumns, by default over the primary key
    all_crop_disease_link = SQLAlchemyConnectionField(CropDiseaseLinkGql.connection) #sort=CropDiseaseLinkGql.sort_argument())
    # Allows sorting over multiple CropPestLinkcolumns, by default over the primary key
    all_crop_pest_link = SQLAlchemyConnectionField(CropPestLinkGql.connection) #sort=CropPestLinkGql.sort_argument())
    # Allows sorting over multiple CropVarietycolumns, by default over the primary key
    all_crop_variety = SQLAlchemyConnectionField(CropVarietyGql.connection) #sort=CropVarietyGql.sort_argument())
    # Allows sorting over multiple Herdcolumns, by default over the primary key
    all_herd = SQLAlchemyConnectionField(HerdGql.connection) #sort=HerdGql.sort_argument())
    # Allows sorting over multiple IsicDivisioncolumns, by default over the primary key
    all_isic_division = SQLAlchemyConnectionField(IsicDivisionGql.connection) #sort=IsicDivisionGql.sort_argument())
    # Allows sorting over multiple Layercolumns, by default over the primary key
    all_layer = SQLAlchemyConnectionField(LayerGql.connection) #sort=LayerGql.sort_argument())
    # Allows sorting over multiple Leaderboardcolumns, by default over the primary key
    all_leaderboard = SQLAlchemyConnectionField(LeaderboardGql.connection) #sort=LeaderboardGql.sort_argument())
    # Allows sorting over multiple LearningPathcolumns, by default over the primary key
    all_learning_path = SQLAlchemyConnectionField(LearningPathGql.connection) #sort=LearningPathGql.sort_argument())
    # Allows sorting over multiple Lessoncolumns, by default over the primary key
    all_lesson = SQLAlchemyConnectionField(LessonGql.connection) #sort=LessonGql.sort_argument())
    # Allows sorting over multiple LoanTransactionRulecolumns, by default over the primary key
    all_loan_transaction_rule = SQLAlchemyConnectionField(LoanTransactionRuleGql.connection) #sort=LoanTransactionRuleGql.sort_argument())
    # Allows sorting over multiple PersonAdminDatacolumns, by default over the primary key
    all_person_admin_data = SQLAlchemyConnectionField(PersonAdminDataGql.connection) #sort=PersonAdminDataGql.sort_argument())
    # Allows sorting over multiple PersonBadgescolumns, by default over the primary key
    all_person_badges = SQLAlchemyConnectionField(PersonBadgesGql.connection) #sort=PersonBadgesGql.sort_argument())
    # Allows sorting over multiple PersonEducationcolumns, by default over the primary key
    all_person_education = SQLAlchemyConnectionField(PersonEducationGql.connection) #sort=PersonEducationGql.sort_argument())
    # Allows sorting over multiple PersonHouseholdcolumns, by default over the primary key
    all_person_household = SQLAlchemyConnectionField(PersonHouseholdGql.connection) #sort=PersonHouseholdGql.sort_argument())
    # Allows sorting over multiple PersonLanguagecolumns, by default over the primary key
    all_person_language = SQLAlchemyConnectionField(PersonLanguageGql.connection) #sort=PersonLanguageGql.sort_argument())
    # Allows sorting over multiple PersonLevelcolumns, by default over the primary key
    all_person_level = SQLAlchemyConnectionField(PersonLevelGql.connection) #sort=PersonLevelGql.sort_argument())
    # Allows sorting over multiple PersonLifeEventcolumns, by default over the primary key
    all_person_life_event = SQLAlchemyConnectionField(PersonLifeEventGql.connection) #sort=PersonLifeEventGql.sort_argument())
    # Allows sorting over multiple PersonLocationLogcolumns, by default over the primary key
    all_person_location_log = SQLAlchemyConnectionField(PersonLocationLogGql.connection) #sort=PersonLocationLogGql.sort_argument())
    # Allows sorting over multiple PersonRelationshipsLinkcolumns, by default over the primary key
    all_person_relationships_link = SQLAlchemyConnectionField(PersonRelationshipsLinkGql.connection) #sort=PersonRelationshipsLinkGql.sort_argument())
    # Allows sorting over multiple PersonTodocolumns, by default over the primary key
    all_person_todo = SQLAlchemyConnectionField(PersonTodoGql.connection) #sort=PersonTodoGql.sort_argument())
    # Allows sorting over multiple SourceDocumentcolumns, by default over the primary key
    all_source_document = SQLAlchemyConnectionField(SourceDocumentGql.connection) #sort=SourceDocumentGql.sort_argument())
    # Allows sorting over multiple UserPointscolumns, by default over the primary key
    all_user_points = SQLAlchemyConnectionField(UserPointsGql.connection) #sort=UserPointsGql.sort_argument())
    # Allows sorting over multiple Admin1codescolumns, by default over the primary key
    all_admin1codes = SQLAlchemyConnectionField(Admin1codesGql.connection) #sort=Admin1codesGql.sort_argument())
    # Allows sorting over multiple Admin2codescolumns, by default over the primary key
    all_admin2codes = SQLAlchemyConnectionField(Admin2codesGql.connection) #sort=Admin2codesGql.sort_argument())
    # Allows sorting over multiple AnimalBreedcolumns, by default over the primary key
    all_animal_breed = SQLAlchemyConnectionField(AnimalBreedGql.connection) #sort=AnimalBreedGql.sort_argument())
    # Allows sorting over multiple Contentcolumns, by default over the primary key
    all_content = SQLAlchemyConnectionField(ContentGql.connection) #sort=ContentGql.sort_argument())
    # Allows sorting over multiple IsicGroupcolumns, by default over the primary key
    all_isic_group = SQLAlchemyConnectionField(IsicGroupGql.connection) #sort=IsicGroupGql.sort_argument())
    # Allows sorting over multiple LearningPathContentcolumns, by default over the primary key
    all_learning_path_content = SQLAlchemyConnectionField(LearningPathContentGql.connection) #sort=LearningPathContentGql.sort_argument())
    # Allows sorting over multiple LessonEngagementcolumns, by default over the primary key
    all_lesson_engagement = SQLAlchemyConnectionField(LessonEngagementGql.connection) #sort=LessonEngagementGql.sort_argument())
    # Allows sorting over multiple PersonAdditionalDatacolumns, by default over the primary key
    all_person_additional_data = SQLAlchemyConnectionField(PersonAdditionalDataGql.connection) #sort=PersonAdditionalDataGql.sort_argument())
    # Allows sorting over multiple Quizcolumns, by default over the primary key
    all_quiz = SQLAlchemyConnectionField(QuizGql.connection) #sort=QuizGql.sort_argument())
    # Allows sorting over multiple Timezonecolumns, by default over the primary key
    all_timezone = SQLAlchemyConnectionField(TimezoneGql.connection) #sort=TimezoneGql.sort_argument())
    # Allows sorting over multiple Animalcolumns, by default over the primary key
    all_animal = SQLAlchemyConnectionField(AnimalGql.connection) #sort=AnimalGql.sort_argument())
    # Allows sorting over multiple ContentRecommendationscolumns, by default over the primary key
    all_content_recommendations = SQLAlchemyConnectionField(ContentRecommendationsGql.connection) #sort=ContentRecommendationsGql.sort_argument())
    # Allows sorting over multiple IsicClasscolumns, by default over the primary key
    all_isic_class = SQLAlchemyConnectionField(IsicClassGql.connection) #sort=IsicClassGql.sort_argument())
    # Allows sorting over multiple LessonContentLinkcolumns, by default over the primary key
    all_lesson_content_link = SQLAlchemyConnectionField(LessonContentLinkGql.connection) #sort=LessonContentLinkGql.sort_argument())
    # Allows sorting over multiple Orgcolumns, by default over the primary key
    all_org = SQLAlchemyConnectionField(OrgGql.connection) #sort=OrgGql.sort_argument())
    # Allows sorting over multiple QuizQuestioncolumns, by default over the primary key
    all_quiz_question = SQLAlchemyConnectionField(QuizQuestionGql.connection) #sort=QuizQuestionGql.sort_argument())
    # Allows sorting over multiple PurchaseOrdercolumns, by default over the primary key
    all_purchase_order = SQLAlchemyConnectionField(PurchaseOrderGql.connection) #sort=PurchaseOrderGql.sort_argument())
    # Allows sorting over multiple SalesOrdercolumns, by default over the primary key
    all_sales_order = SQLAlchemyConnectionField(SalesOrderGql.connection) #sort=SalesOrderGql.sort_argument())
    # Allows sorting over multiple AccGlAccountcolumns, by default over the primary key
    all_acc_gl_account = SQLAlchemyConnectionField(AccGlAccountGql.connection) #sort=AccGlAccountGql.sort_argument())
    # Allows sorting over multiple AccGlClosurecolumns, by default over the primary key
    all_acc_gl_closure = SQLAlchemyConnectionField(AccGlClosureGql.connection) #sort=AccGlClosureGql.sort_argument())
    # Allows sorting over multiple AnimalHealthcolumns, by default over the primary key
    all_animal_health = SQLAlchemyConnectionField(AnimalHealthGql.connection) #sort=AnimalHealthGql.sort_argument())
    # Allows sorting over multiple Calendarcolumns, by default over the primary key
    all_calendar = SQLAlchemyConnectionField(CalendarGql.connection) #sort=CalendarGql.sort_argument())
    # Allows sorting over multiple Contactcolumns, by default over the primary key
    all_contact = SQLAlchemyConnectionField(ContactGql.connection) #sort=ContactGql.sort_argument())
    # Allows sorting over multiple Doccolumns, by default over the primary key
    all_doc = SQLAlchemyConnectionField(DocGql.connection) #sort=DocGql.sort_argument())
    # Allows sorting over multiple Fundcolumns, by default over the primary key
    all_fund = SQLAlchemyConnectionField(FundGql.connection) #sort=FundGql.sort_argument())
    # Allows sorting over multiple HerdAnimalLinkcolumns, by default over the primary key
    all_herd_animal_link = SQLAlchemyConnectionField(HerdAnimalLinkGql.connection) #sort=HerdAnimalLinkGql.sort_argument())
    # Allows sorting over multiple LoanRiskAnalysiscolumns, by default over the primary key
    all_loan_risk_analysis = SQLAlchemyConnectionField(LoanRiskAnalysisGql.connection) #sort=LoanRiskAnalysisGql.sort_argument())
    # Allows sorting over multiple LtagBatchcolumns, by default over the primary key
    all_ltag_batch = SQLAlchemyConnectionField(LtagBatchGql.connection) #sort=LtagBatchGql.sort_argument())
    # Allows sorting over multiple Opportunitycolumns, by default over the primary key
    all_opportunity = SQLAlchemyConnectionField(OpportunityGql.connection) #sort=OpportunityGql.sort_argument())
    # Allows sorting over multiple OrgPeopleLinkcolumns, by default over the primary key
    all_org_people_link = SQLAlchemyConnectionField(OrgPeopleLinkGql.connection) #sort=OrgPeopleLinkGql.sort_argument())
    # Allows sorting over multiple OrgSuppliesLinkcolumns, by default over the primary key
    all_org_supplies_link = SQLAlchemyConnectionField(OrgSuppliesLinkGql.connection) #sort=OrgSuppliesLinkGql.sort_argument())
    # Allows sorting over multiple PersonEmploymentcolumns, by default over the primary key
    all_person_employment = SQLAlchemyConnectionField(PersonEmploymentGql.connection) #sort=PersonEmploymentGql.sort_argument())
    # Allows sorting over multiple Pipelinecolumns, by default over the primary key
    all_pipeline = SQLAlchemyConnectionField(PipelineGql.connection) #sort=PipelineGql.sort_argument())
    # Allows sorting over multiple ProductSkuLinkcolumns, by default over the primary key
    all_product_sku_link = SQLAlchemyConnectionField(ProductSkuLinkGql.connection) #sort=ProductSkuLinkGql.sort_argument())
    # Allows sorting over multiple Quotecolumns, by default over the primary key
    all_quote = SQLAlchemyConnectionField(QuoteGql.connection) #sort=QuoteGql.sort_argument())
    # Allows sorting over multiple ScoringModelcolumns, by default over the primary key
    all_scoring_model = SQLAlchemyConnectionField(ScoringModelGql.connection) #sort=ScoringModelGql.sort_argument())
    # Allows sorting over multiple SupplierParamcolumns, by default over the primary key
    all_supplier_param = SQLAlchemyConnectionField(SupplierParamGql.connection) #sort=SupplierParamGql.sort_argument())
    # Allows sorting over multiple UserResponsecolumns, by default over the primary key
    all_user_response = SQLAlchemyConnectionField(UserResponseGql.connection) #sort=UserResponseGql.sort_argument())
    # Allows sorting over multiple Warehousecolumns, by default over the primary key
    all_warehouse = SQLAlchemyConnectionField(WarehouseGql.connection) #sort=WarehouseGql.sort_argument())
    # Allows sorting over multiple PurchaseOrderDetailscolumns, by default over the primary key
    all_purchase_order_details = SQLAlchemyConnectionField(PurchaseOrderDetailsGql.connection) #sort=PurchaseOrderDetailsGql.sort_argument())
    # Allows sorting over multiple SalesOrderDetailscolumns, by default over the primary key
    all_sales_order_details = SQLAlchemyConnectionField(SalesOrderDetailsGql.connection) #sort=SalesOrderDetailsGql.sort_argument())
    # Allows sorting over multiple AccBalancescolumns, by default over the primary key
    all_acc_balances = SQLAlchemyConnectionField(AccBalancesGql.connection) #sort=AccBalancesGql.sort_argument())
    # Allows sorting over multiple AccGlJournalEntrycolumns, by default over the primary key
    all_acc_gl_journal_entry = SQLAlchemyConnectionField(AccGlJournalEntryGql.connection) #sort=AccGlJournalEntryGql.sort_argument())
    # Allows sorting over multiple AccProductLinkcolumns, by default over the primary key
    all_acc_product_link = SQLAlchemyConnectionField(AccProductLinkGql.connection) #sort=AccProductLinkGql.sort_argument())
    # Allows sorting over multiple Aislecolumns, by default over the primary key
    all_aisle = SQLAlchemyConnectionField(AisleGql.connection) #sort=AisleGql.sort_argument())
    # Allows sorting over multiple CalendarEventcolumns, by default over the primary key
    all_calendar_event = SQLAlchemyConnectionField(CalendarEventGql.connection) #sort=CalendarEventGql.sort_argument())
    # Allows sorting over multiple InventoryOrderMapcolumns, by default over the primary key
    all_inventory_order_map = SQLAlchemyConnectionField(InventoryOrderMapGql.connection) #sort=InventoryOrderMapGql.sort_argument())
    # Allows sorting over multiple Invoicecolumns, by default over the primary key
    all_invoice = SQLAlchemyConnectionField(InvoiceGql.connection) #sort=InvoiceGql.sort_argument())
    # Allows sorting over multiple LandParcelcolumns, by default over the primary key
    all_land_parcel = SQLAlchemyConnectionField(LandParcelGql.connection) #sort=LandParcelGql.sort_argument())
    # Allows sorting over multiple LeadScorecolumns, by default over the primary key
    all_lead_score = SQLAlchemyConnectionField(LeadScoreGql.connection) #sort=LeadScoreGql.sort_argument())
    # Allows sorting over multiple LoanProductcolumns, by default over the primary key
    all_loan_product = SQLAlchemyConnectionField(LoanProductGql.connection) #sort=LoanProductGql.sort_argument())
    # Allows sorting over multiple Ltagcolumns, by default over the primary key
    all_ltag = SQLAlchemyConnectionField(LtagGql.connection) #sort=LtagGql.sort_argument())
    # Allows sorting over multiple OpportunityContactLinkcolumns, by default over the primary key
    all_opportunity_contact_link = SQLAlchemyConnectionField(OpportunityContactLinkGql.connection) #sort=OpportunityContactLinkGql.sort_argument())
    # Allows sorting over multiple OpportunityIsicClassLinkcolumns, by default over the primary key
    all_opportunity_isic_class_link = SQLAlchemyConnectionField(OpportunityIsicClassLinkGql.connection) #sort=OpportunityIsicClassLinkGql.sort_argument())
    # Allows sorting over multiple PipelineStagescolumns, by default over the primary key
    all_pipeline_stages = SQLAlchemyConnectionField(PipelineStagesGql.connection) #sort=PipelineStagesGql.sort_argument())
    # Allows sorting over multiple ProductReturncolumns, by default over the primary key
    all_product_return = SQLAlchemyConnectionField(ProductReturnGql.connection) #sort=ProductReturnGql.sort_argument())
    # Allows sorting over multiple QuoteDetailscolumns, by default over the primary key
    all_quote_details = SQLAlchemyConnectionField(QuoteDetailsGql.connection) #sort=QuoteDetailsGql.sort_argument())
    # Allows sorting over multiple CalendarEventAttachmentcolumns, by default over the primary key
    all_calendar_event_attachment = SQLAlchemyConnectionField(CalendarEventAttachmentGql.connection) #sort=CalendarEventAttachmentGql.sort_argument())
    # Allows sorting over multiple CalendarEventAttendeecolumns, by default over the primary key
    all_calendar_event_attendee = SQLAlchemyConnectionField(CalendarEventAttendeeGql.connection) #sort=CalendarEventAttendeeGql.sort_argument())
    # Allows sorting over multiple CalendarEventRecurrencecolumns, by default over the primary key
    all_calendar_event_recurrence = SQLAlchemyConnectionField(CalendarEventRecurrenceGql.connection) #sort=CalendarEventRecurrenceGql.sort_argument())
    # Allows sorting over multiple CalendarEventReminderscolumns, by default over the primary key
    all_calendar_event_reminders = SQLAlchemyConnectionField(CalendarEventRemindersGql.connection) #sort=CalendarEventRemindersGql.sort_argument())
    # Allows sorting over multiple InventoryOrderDetailcolumns, by default over the primary key
    all_inventory_order_detail = SQLAlchemyConnectionField(InventoryOrderDetailGql.connection) #sort=InventoryOrderDetailGql.sort_argument())
    # Allows sorting over multiple InvoiceDetailscolumns, by default over the primary key
    all_invoice_details = SQLAlchemyConnectionField(InvoiceDetailsGql.connection) #sort=InvoiceDetailsGql.sort_argument())
    # Allows sorting over multiple InvoicePaymentscolumns, by default over the primary key
    all_invoice_payments = SQLAlchemyConnectionField(InvoicePaymentsGql.connection) #sort=InvoicePaymentsGql.sort_argument())
    # Allows sorting over multiple LandImprovementscolumns, by default over the primary key
    all_land_improvements = SQLAlchemyConnectionField(LandImprovementsGql.connection) #sort=LandImprovementsGql.sort_argument())
    # Allows sorting over multiple LandOwnershipHistorycolumns, by default over the primary key
    all_land_ownership_history = SQLAlchemyConnectionField(LandOwnershipHistoryGql.connection) #sort=LandOwnershipHistoryGql.sort_argument())
    # Allows sorting over multiple LandUseHistorycolumns, by default over the primary key
    all_land_use_history = SQLAlchemyConnectionField(LandUseHistoryGql.connection) #sort=LandUseHistoryGql.sort_argument())
    # Allows sorting over multiple LandUseRecommendationscolumns, by default over the primary key
    all_land_use_recommendations = SQLAlchemyConnectionField(LandUseRecommendationsGql.connection) #sort=LandUseRecommendationsGql.sort_argument())
    # Allows sorting over multiple Loancolumns, by default over the primary key
    all_loan = SQLAlchemyConnectionField(LoanGql.connection) #sort=LoanGql.sort_argument())
    # Allows sorting over multiple LoanProductStrategyOverridecolumns, by default over the primary key
    all_loan_product_strategy_override = SQLAlchemyConnectionField(LoanProductStrategyOverrideGql.connection) #sort=LoanProductStrategyOverrideGql.sort_argument())
    # Allows sorting over multiple OpportunityPipelineStageLinkcolumns, by default over the primary key
    all_opportunity_pipeline_stage_link = SQLAlchemyConnectionField(OpportunityPipelineStageLinkGql.connection) #sort=OpportunityPipelineStageLinkGql.sort_argument())
    # Allows sorting over multiple Rackcolumns, by default over the primary key
    all_rack = SQLAlchemyConnectionField(RackGql.connection) #sort=RackGql.sort_argument())
    # Allows sorting over multiple SoilTestscolumns, by default over the primary key
    all_soil_tests = SQLAlchemyConnectionField(SoilTestsGql.connection) #sort=SoilTestsGql.sort_argument())
    # Allows sorting over multiple Waypointcolumns, by default over the primary key
    all_waypoint = SQLAlchemyConnectionField(WaypointGql.connection) #sort=WaypointGql.sort_argument())
    # Allows sorting over multiple LoanArrearsAgingcolumns, by default over the primary key
    all_loan_arrears_aging = SQLAlchemyConnectionField(LoanArrearsAgingGql.connection) #sort=LoanArrearsAgingGql.sort_argument())
    # Allows sorting over multiple LoanChargecolumns, by default over the primary key
    all_loan_charge = SQLAlchemyConnectionField(LoanChargeGql.connection) #sort=LoanChargeGql.sort_argument())
    # Allows sorting over multiple LoanCollateralcolumns, by default over the primary key
    all_loan_collateral = SQLAlchemyConnectionField(LoanCollateralGql.connection) #sort=LoanCollateralGql.sort_argument())
    # Allows sorting over multiple LoanGuarantorcolumns, by default over the primary key
    all_loan_guarantor = SQLAlchemyConnectionField(LoanGuarantorGql.connection) #sort=LoanGuarantorGql.sort_argument())
    # Allows sorting over multiple LoanOfficerAssignmentHistorycolumns, by default over the primary key
    all_loan_officer_assignment_history = SQLAlchemyConnectionField(LoanOfficerAssignmentHistoryGql.connection) #sort=LoanOfficerAssignmentHistoryGql.sort_argument())
    # Allows sorting over multiple LoanRepaymentSchedulecolumns, by default over the primary key
    all_loan_repayment_schedule = SQLAlchemyConnectionField(LoanRepaymentScheduleGql.connection) #sort=LoanRepaymentScheduleGql.sort_argument())
    # Allows sorting over multiple Shelfcolumns, by default over the primary key
    all_shelf = SQLAlchemyConnectionField(ShelfGql.connection) #sort=ShelfGql.sort_argument())
    # Allows sorting over multiple WaypointAuditcolumns, by default over the primary key
    all_waypoint_audit = SQLAlchemyConnectionField(WaypointAuditGql.connection) #sort=WaypointAuditGql.sort_argument())
    # Allows sorting over multiple Bincolumns, by default over the primary key
    all_bin = SQLAlchemyConnectionField(BinGql.connection) #sort=BinGql.sort_argument())
    # Allows sorting over multiple Inventorycolumns, by default over the primary key
    all_inventory = SQLAlchemyConnectionField(InventoryGql.connection) #sort=InventoryGql.sort_argument())
    # Allows sorting over multiple InventoryLogcolumns, by default over the primary key
    all_inventory_log = SQLAlchemyConnectionField(InventoryLogGql.connection) #sort=InventoryLogGql.sort_argument())
    # Allows sorting over multiple PerishableItemAlertscolumns, by default over the primary key
    all_perishable_item_alerts = SQLAlchemyConnectionField(PerishableItemAlertsGql.connection) #sort=PerishableItemAlertsGql.sort_argument())
    # Allows sorting over multiple SerializedItemscolumns, by default over the primary key
    all_serialized_items = SQLAlchemyConnectionField(SerializedItemsGql.connection) #sort=SerializedItemsGql.sort_argument())
    # Allows sorting over multiple InventorySerialLogcolumns, by default over the primary key
    all_inventory_serial_log = SQLAlchemyConnectionField(InventorySerialLogGql.connection) #sort=InventorySerialLogGql.sort_argument())

schema = graphene.Schema(query=Query)
app.add_url_rule('/graphql', view_func=GraphQLView.as_view(
    'graphql',
    schema=schema,
    graphiql=True,
))
