
# coding: utf-8
# AUTOGENERATED BY appgen 
# Copyright (C) Nyimbi Odero, 2024 


 

import calendar
from flask import render_template
# from flask_mail import Message, Mail
# from flask.ext.babel import lazy_gettext as _
from flask import g

# If you want to enable search
# from elasticsearch import Elasticsearch

# from .view_mixins import *
from py_templates.apis import *

##########
# Various Utilities
hide_list = ['created_by', 'changed_by', 'created_on', 'changed_on']

#To pretty Print from PersonMixin
def pretty_month_year(value):
    return calendar.month_name[value.month] + ' ' + str(value.year)


def pretty_year(value):
    return str(value.year)


# def fill_gender():
#   try:
#       db.session.add(Gender(name='Male'))
#       db.session.add(Gender(name='Female'))
#       db.session.commit()
#   except:
#       db.session.rollback()
#############

def get_user():
    return g.user


from flask_appbuilder import ModelView
from flask_appbuilder.models.sqla.interface import SQLAInterface
from flask_appbuilder.views import MasterDetailView, MultipleView
from .models import *

class AgentTierModelView(ModelView):
    datamodel = SQLAInterface(AgentTier)
    list_title = 'List Agent Tier'
    show_title = 'Show Agent Tier'
    edit_title = 'Edit Agent Tier'
    add_title  = 'Add Agent Tier'
 
    list_columns = ['name', 'notes']
    # show_columns = ['name', 'notes']
    # edit_columns = ['name', 'notes']
    add_columns = ['name', 'notes']
    # search_columns = ['name', 'notes']
    description_columns = {
        'id' : 'Identity column - Unique identifier for the agent tier.',
        'name' : 'Name of the agent tier - Descriptive name or title of the agent tier.',
        'notes' : 'Additional notes or remarks about the agent tier, if necessary.',
    }
    # list_exclude_columns = ['name', 'notes']
    # show_exclude_columns = ['name', 'notes']
    # edit_exclude_columns = ['name', 'notes']
    # add_exclude_columns = ['name', 'notes']
    # search_exclude_columns = ['name', 'notes']
    # order_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    
    label_columns = {'name':'Name', 'notes':'Notes'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'notes']
class BankModelView(ModelView):
    datamodel = SQLAInterface(Bank)
    list_title = 'List Bank'
    show_title = 'Show Bank'
    edit_title = 'Edit Bank'
    add_title  = 'Add Bank'
 
    list_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # show_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # edit_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    add_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # search_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    description_columns = {
        'id' : 'Unique identifier for the bank.',
        'code' : 'NIBSS institutionCode, a unique code identifying the bank.',
        'name' : 'Name of the Bank.',
        'category' : 'Bank Category, representing the category of the bank.',
        'swift_code' : 'SWIFT Code, a unique international bank identifier.',
        'sort_code' : 'SORT Code, a unique bank sorting code.',
        'iban' : 'IBAN Code, a unique international bank account number.',
        'cust_care_phone' : 'Contact phone number for customer care.',
        'cust_care_email' : 'Contact email for customer care.',
        'escalation_contact' : 'Contact information for escalation purposes.',
    }
    # list_exclude_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # show_exclude_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # edit_exclude_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # add_exclude_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # search_exclude_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # order_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # add_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # add_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    # add_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
    
    label_columns = {'code':'Code', 'name':'Name', 'category':'Category', 'swift_code':'Swift Code', 'sort_code':'Sort Code', 'iban':'Iban', 'cust_care_phone':'Cust Care Phone', 'cust_care_email':'Cust Care Email', 'escalation_contact':'Escalation Contact'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['code', 'name', 'category', 'swift_code', 'sort_code', 'iban', 'cust_care_phone', 'cust_care_email', 'escalation_contact']
class BillerCategoryModelView(ModelView):
    datamodel = SQLAInterface(BillerCategory)
    list_title = 'List Biller Category'
    show_title = 'Show Biller Category'
    edit_title = 'Edit Biller Category'
    add_title  = 'Add Biller Category'
 
    list_columns = ['name', 'notes']
    # show_columns = ['name', 'notes']
    # edit_columns = ['name', 'notes']
    add_columns = ['name', 'notes']
    # search_columns = ['name', 'notes']
    description_columns = {
        'id' : 'Unique identifier for the biller category.',
        'name' : 'Name or title of the biller category.',
        'notes' : 'Additional notes or remarks about the biller category.',
    }
    # list_exclude_columns = ['name', 'notes']
    # show_exclude_columns = ['name', 'notes']
    # edit_exclude_columns = ['name', 'notes']
    # add_exclude_columns = ['name', 'notes']
    # search_exclude_columns = ['name', 'notes']
    # order_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    
    label_columns = {'name':'Name', 'notes':'Notes'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'notes']
class ContactTypeModelView(ModelView):
    datamodel = SQLAInterface(ContactType)
    list_title = 'List Contact Type'
    show_title = 'Show Contact Type'
    edit_title = 'Edit Contact Type'
    add_title  = 'Add Contact Type'
 
    list_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # show_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # edit_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    add_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # search_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    description_columns = {
        'id' : 'Unique identifier for the address type.',
        'name' : 'Name or type of contact method, e.g., Mobile, Email, WhatsApp.',
        'description' : 'Brief description about the address type, providing context or usage scenarios.',
        'is_digital' : 'Indicates if the contact method is digital or physical.',
        'requires_verification' : 'Indicates if the address type typically requires a verification process, e.g., email confirmation.',
        'max_length' : 'If applicable, the maximum character length of a value of this address type. Useful for validation.',
        'icon_url' : 'URL or link to an icon or image representing this address type. Useful for UI/UX purposes.',
        'created_at' : 'Timestamp when the address type was added to the system.',
        'updated_at' : 'Timestamp when the address type was last updated.',
    }
    # list_exclude_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # show_exclude_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # edit_exclude_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # add_exclude_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # search_exclude_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # order_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # add_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # add_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    # add_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
    
    label_columns = {'name':'Name', 'description':'Description', 'is_digital':'Is Digital', 'requires_verification':'Requires Verification', 'max_length':'Max Length', 'icon_url':'Icon Url', 'created_at':'Created At', 'updated_at':'Updated At'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'description', 'is_digital', 'requires_verification', 'max_length', 'icon_url', 'created_at', 'updated_at']
class CountryModelView(ModelView):
    datamodel = SQLAInterface(Country)
    list_title = 'List Country'
    show_title = 'Show Country'
    edit_title = 'Edit Country'
    add_title  = 'Add Country'
 
    list_columns = ['name', 'code', 'phone_code']
    # show_columns = ['name', 'code', 'phone_code']
    # edit_columns = ['name', 'code', 'phone_code']
    add_columns = ['name', 'code', 'phone_code']
    # search_columns = ['name', 'code', 'phone_code']
    description_columns = {
        'id' : 'None',
        'name' : ' Country Name',
        'code' : 'Country Code',
        'phone_code' : 'Dialling prefix of the country e.g +234 for Nigeria',
    }
    # list_exclude_columns = ['name', 'code', 'phone_code']
    # show_exclude_columns = ['name', 'code', 'phone_code']
    # edit_exclude_columns = ['name', 'code', 'phone_code']
    # add_exclude_columns = ['name', 'code', 'phone_code']
    # search_exclude_columns = ['name', 'code', 'phone_code']
    # order_columns = ['name', 'code', 'phone_code']
    # add_columns = ['name', 'code', 'phone_code']
    # add_columns = ['name', 'code', 'phone_code']
    # add_columns = ['name', 'code', 'phone_code']
    
    label_columns = {'name':'Name', 'code':'Code', 'phone_code':'Phone Code'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'code', 'phone_code']
class CouponModelView(ModelView):
    datamodel = SQLAInterface(Coupon)
    list_title = 'List Coupon'
    show_title = 'Show Coupon'
    edit_title = 'Edit Coupon'
    add_title  = 'Add Coupon'
 
    list_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # show_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # edit_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    add_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # search_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    description_columns = {
        'id' : 'Unique identifier for the coupon.',
        'value' : 'The monetary value of the coupon.',
        'serial_no' : 'Serial number or code associated with the coupon.',
        'active' : 'Indicates whether the coupon is active.',
        'used' : 'Indicates whether the coupon has been used.',
        'used_date' : 'Date and time when the coupon was used.',
        'primary_scan_code_label' : 'Primary scan code label associated with the coupon.',
        'is_return_coupon' : 'Indicates whether the coupon is a return coupon.',
        'expiration_date' : 'Date when the coupon expires.',
        'generation_date' : 'Date and time when the coupon was generated.',
        'activation_date' : 'Date and time when the coupon was activated.',
        'secondary_scan_code_label' : 'Secondary scan code label associated with the coupon.',
        'scan_code_img' : 'Image or code used for scanning the coupon.',
        'coupon_code' : 'Code associated with the coupon.',
        'return_coupon_reason' : 'Reason for returning the coupon.',
        'is_valid' : 'Indicates whether the coupon is valid.',
        'coupon_status' : 'Status of the coupon.',
        'discount_percentage' : 'Percentage discount offered by the coupon.',
        'coupon_count' : 'Number of coupons available.',
        'payment_method_status' : 'Status of the payment method associated with the coupon.',
    }
    # list_exclude_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # show_exclude_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # edit_exclude_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # add_exclude_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # search_exclude_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # order_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # add_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # add_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    # add_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
    
    label_columns = {'value':'Value', 'serial_no':'Serial No', 'active':'Active', 'used':'Used', 'used_date':'Used Date', 'primary_scan_code_label':'Primary Scan Code Label', 'is_return_coupon':'Is Return Coupon', 'expiration_date':'Expiration Date', 'generation_date':'Generation Date', 'activation_date':'Activation Date', 'secondary_scan_code_label':'Secondary Scan Code Label', 'scan_code_img':'Scan Code Img', 'coupon_code':'Coupon Code', 'return_coupon_reason':'Return Coupon Reason', 'is_valid':'Is Valid', 'coupon_status':'Coupon Status', 'discount_percentage':'Discount Percentage', 'coupon_count':'Coupon Count', 'payment_method_status':'Payment Method Status'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['value', 'serial_no', 'active', 'used', 'used_date', 'primary_scan_code_label', 'is_return_coupon', 'expiration_date', 'generation_date', 'activation_date', 'secondary_scan_code_label', 'scan_code_img', 'coupon_code', 'return_coupon_reason', 'is_valid', 'coupon_status', 'discount_percentage', 'coupon_count', 'payment_method_status']
class CurrencyModelView(ModelView):
    datamodel = SQLAInterface(Currency)
    list_title = 'List Currency'
    show_title = 'Show Currency'
    edit_title = 'Edit Currency'
    add_title  = 'Add Currency'
 
    list_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # show_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # edit_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    add_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # search_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    description_columns = {
        'id' : 'Unique identifier for the currency.',
        'name' : 'Short name or code of the currency.',
        'symbol' : 'Symbol representing the currency.',
        'numeric_code' : 'Numeric code for the currency.',
        'full_name' : 'Full name or description of the currency.',
        'decimal_places' : 'Number of decimal places for the currency.',
        'internationalized_name_code' : 'Code for the internationalized name of the currency.',
    }
    # list_exclude_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # show_exclude_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # edit_exclude_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # add_exclude_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # search_exclude_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # order_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # add_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # add_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    # add_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
    
    label_columns = {'name':'Name', 'symbol':'Symbol', 'numeric_code':'Numeric Code', 'full_name':'Full Name', 'decimal_places':'Decimal Places', 'internationalized_name_code':'Internationalized Name Code'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'symbol', 'numeric_code', 'full_name', 'decimal_places', 'internationalized_name_code']
class CustomerSegmentModelView(ModelView):
    datamodel = SQLAInterface(CustomerSegment)
    list_title = 'List Customer Segment'
    show_title = 'Show Customer Segment'
    edit_title = 'Edit Customer Segment'
    add_title  = 'Add Customer Segment'
 
    list_columns = ['name', 'notes']
    # show_columns = ['name', 'notes']
    # edit_columns = ['name', 'notes']
    add_columns = ['name', 'notes']
    # search_columns = ['name', 'notes']
    description_columns = {
        'id' : 'Unique identifier for the customer segment.',
        'name' : 'Name or title of the customer segment.',
        'notes' : 'Additional notes or descriptions related to the customer segment.',
    }
    # list_exclude_columns = ['name', 'notes']
    # show_exclude_columns = ['name', 'notes']
    # edit_exclude_columns = ['name', 'notes']
    # add_exclude_columns = ['name', 'notes']
    # search_exclude_columns = ['name', 'notes']
    # order_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    
    label_columns = {'name':'Name', 'notes':'Notes'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'notes']
class DocTypeModelView(ModelView):
    datamodel = SQLAInterface(DocType)
    list_title = 'List Doc Type'
    show_title = 'Show Doc Type'
    edit_title = 'Edit Doc Type'
    add_title  = 'Add Doc Type'
 
    list_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # show_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # edit_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    add_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # search_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    description_columns = {
        'id' : 'Unique identifier for the document type.',
        'name' : 'Name or title of the document type e.g. Passport, Drivers License.',
        'doc_category' : 'category of this docunment',
        'notes' : 'Any additional remarks or details about the document type.',
        'required_information' : 'List or description of required fields/information for this document type.',
        'is_serialized' : 'Does this document type have a serial number',
        'serial_length' : 'Typical length of a serial number for this document type',
        'expires' : 'Does this type of document expire',
        'validity_period' : 'Standard validity duration of this type of document in days.',
        'renewal_frequency' : 'Frequency at which this document typically needs renewal, in days. Useful for setting reminders.',
        'is_government_issued' : 'Indicates if this document is typically issued by a government authority.',
        'is_digital' : 'Indicates if the document is typically in digital format.',
        'template_url' : 'URL or link to a template or sample of this document type, if available.',
        'example_image_url' : 'URL or link to an example image of this document type.',
        'created_at' : 'Timestamp when the document type was added to the system.',
        'updated_at' : 'Timestamp when the document type was last updated.',
    }
    # list_exclude_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # show_exclude_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # edit_exclude_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # add_exclude_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # search_exclude_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # order_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # add_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # add_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    # add_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
    
    label_columns = {'name':'Name', 'doc_category':'Doc Category', 'notes':'Notes', 'required_information':'Required Information', 'is_serialized':'Is Serialized', 'serial_length':'Serial Length', 'expires':'Expires', 'validity_period':'Validity Period', 'renewal_frequency':'Renewal Frequency', 'is_government_issued':'Is Government Issued', 'is_digital':'Is Digital', 'template_url':'Template Url', 'example_image_url':'Example Image Url', 'created_at':'Created At', 'updated_at':'Updated At'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'doc_category', 'notes', 'required_information', 'is_serialized', 'serial_length', 'expires', 'validity_period', 'renewal_frequency', 'is_government_issued', 'is_digital', 'template_url', 'example_image_url', 'created_at', 'updated_at']
class MimeTypeModelView(ModelView):
    datamodel = SQLAInterface(MimeType)
    list_title = 'List Mime Type'
    show_title = 'Show Mime Type'
    edit_title = 'Edit Mime Type'
    add_title  = 'Add Mime Type'
 
    list_columns = ['label', 'mime_type', 'file_extension']
    # show_columns = ['label', 'mime_type', 'file_extension']
    # edit_columns = ['label', 'mime_type', 'file_extension']
    add_columns = ['label', 'mime_type', 'file_extension']
    # search_columns = ['label', 'mime_type', 'file_extension']
    description_columns = {
        'id' : 'None',
        'label' : 'Label of this mime type',
        'mime_type' : 'None',
        'file_extension' : 'File extensions for this mime type',
    }
    # list_exclude_columns = ['label', 'mime_type', 'file_extension']
    # show_exclude_columns = ['label', 'mime_type', 'file_extension']
    # edit_exclude_columns = ['label', 'mime_type', 'file_extension']
    # add_exclude_columns = ['label', 'mime_type', 'file_extension']
    # search_exclude_columns = ['label', 'mime_type', 'file_extension']
    # order_columns = ['label', 'mime_type', 'file_extension']
    # add_columns = ['label', 'mime_type', 'file_extension']
    # add_columns = ['label', 'mime_type', 'file_extension']
    # add_columns = ['label', 'mime_type', 'file_extension']
    
    label_columns = {'label':'Label', 'mime_type':'Mime Type', 'file_extension':'File Extension'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['label', 'mime_type', 'file_extension']
class MimeTypeMapModelView(ModelView):
    datamodel = SQLAInterface(MimeTypeMap)
    list_title = 'List Mime Type Map'
    show_title = 'Show Mime Type Map'
    edit_title = 'Edit Mime Type Map'
    add_title  = 'Add Mime Type Map'
 
    list_columns = ['extension', 'mime_type']
    # show_columns = ['extension', 'mime_type']
    # edit_columns = ['extension', 'mime_type']
    add_columns = ['extension', 'mime_type']
    # search_columns = ['extension', 'mime_type']
    description_columns = {
        'id' : 'Unique identifier for the MIME type mapping.',
        'extension' : 'File extension, such as jpg or pdf',
        'mime_type' : 'MIME type associated with the file extension.',
    }
    # list_exclude_columns = ['extension', 'mime_type']
    # show_exclude_columns = ['extension', 'mime_type']
    # edit_exclude_columns = ['extension', 'mime_type']
    # add_exclude_columns = ['extension', 'mime_type']
    # search_exclude_columns = ['extension', 'mime_type']
    # order_columns = ['extension', 'mime_type']
    # add_columns = ['extension', 'mime_type']
    # add_columns = ['extension', 'mime_type']
    # add_columns = ['extension', 'mime_type']
    
    label_columns = {'extension':'Extension', 'mime_type':'Mime Type'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['extension', 'mime_type']
class PaymentCardModelView(ModelView):
    datamodel = SQLAInterface(PaymentCard)
    list_title = 'List Payment Card'
    show_title = 'Show Payment Card'
    edit_title = 'Edit Payment Card'
    add_title  = 'Add Payment Card'
 
    list_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # show_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # edit_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    add_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # search_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    description_columns = {
        'id' : 'Unique identifier for the payment card.',
        'bin' : 'Bank Identification Number (BIN) of the card.',
        'pan' : 'Primary Account Number (PAN) of the card.',
        'credit_card_expired' : 'Indicates whether the credit card has expired.',
        'card_token' : 'Tokenized representation of the card.',
        'issue_number' : 'Issue number of the card.',
        'bill_to_city' : 'City associated with the billing address.',
        'masked_number' : 'Masked version of the card number.',
        'name' : 'Name associated with the card.',
        'company_name' : 'Company name associated with the card.',
        'card_holder_name' : 'Name of the cardholder.',
        'number_last_digits' : 'Last digits of the card number.',
        'payment_card_type' : 'Type of payment card (e.g., Visa, Mastercard).',
        'derived_card_type_code' : 'Derived card type code.',
        'expiration_year' : 'Year of card expiration.',
        'expiration_month' : 'Month of card expiration.',
        'bill_to_street' : 'Street address associated with the billing address.',
        'bill_to_street2' : 'Additional street address information.',
        'bill_to_first_name' : 'First name associated with the billing address.',
        'bill_to_last_name' : 'Last name associated with the billing address.',
        'payment_method_status' : 'Status of the payment method.',
        'card_number' : 'Masked version of the card number.',
        'cardholder_name' : 'Name of the cardholder.',
        'card_expiration' : 'Expiration date of the card (stored as MM/YY format).',
        'service_code' : 'Service code associated with the card.',
        'cvv' : 'Masked or hashed version of the CVV (Card Verification Value).',
    }
    # list_exclude_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # show_exclude_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # edit_exclude_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # add_exclude_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # search_exclude_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # order_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # add_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # add_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    # add_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
    
    label_columns = {'bin':'Bin', 'pan':'Pan', 'credit_card_expired':'Credit Card Expired', 'card_token':'Card Token', 'issue_number':'Issue Number', 'bill_to_city':'Bill To City', 'masked_number':'Masked Number', 'name':'Name', 'company_name':'Company Name', 'card_holder_name':'Card Holder Name', 'number_last_digits':'Number Last Digits', 'payment_card_type':'Payment Card Type', 'derived_card_type_code':'Derived Card Type Code', 'expiration_year':'Expiration Year', 'expiration_month':'Expiration Month', 'bill_to_street':'Bill To Street', 'bill_to_street2':'Bill To Street2', 'bill_to_first_name':'Bill To First Name', 'bill_to_last_name':'Bill To Last Name', 'payment_method_status':'Payment Method Status', 'card_number':'Card Number', 'cardholder_name':'Cardholder Name', 'card_expiration':'Card Expiration', 'service_code':'Service Code', 'cvv':'Cvv'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['bin', 'pan', 'credit_card_expired', 'card_token', 'issue_number', 'bill_to_city', 'masked_number', 'name', 'company_name', 'card_holder_name', 'number_last_digits', 'payment_card_type', 'derived_card_type_code', 'expiration_year', 'expiration_month', 'bill_to_street', 'bill_to_street2', 'bill_to_first_name', 'bill_to_last_name', 'payment_method_status', 'card_number', 'cardholder_name', 'card_expiration', 'service_code', 'cvv']
class PromotionModelView(ModelView):
    datamodel = SQLAInterface(Promotion)
    list_title = 'List Promotion'
    show_title = 'Show Promotion'
    edit_title = 'Edit Promotion'
    add_title  = 'Add Promotion'
 
    list_columns = ['name', 'notes', 'start_date', 'end_date']
    # show_columns = ['name', 'notes', 'start_date', 'end_date']
    # edit_columns = ['name', 'notes', 'start_date', 'end_date']
    add_columns = ['name', 'notes', 'start_date', 'end_date']
    # search_columns = ['name', 'notes', 'start_date', 'end_date']
    description_columns = {
        'id' : 'Unique identifier for the promotion.',
        'name' : 'Name or title of the promotion.',
        'notes' : 'Additional remarks or details about the promotion.',
        'start_date' : 'Start date of the promotion.',
        'end_date' : 'End date of the promotion.',
    }
    # list_exclude_columns = ['name', 'notes', 'start_date', 'end_date']
    # show_exclude_columns = ['name', 'notes', 'start_date', 'end_date']
    # edit_exclude_columns = ['name', 'notes', 'start_date', 'end_date']
    # add_exclude_columns = ['name', 'notes', 'start_date', 'end_date']
    # search_exclude_columns = ['name', 'notes', 'start_date', 'end_date']
    # order_columns = ['name', 'notes', 'start_date', 'end_date']
    # add_columns = ['name', 'notes', 'start_date', 'end_date']
    # add_columns = ['name', 'notes', 'start_date', 'end_date']
    # add_columns = ['name', 'notes', 'start_date', 'end_date']
    
    label_columns = {'name':'Name', 'notes':'Notes', 'start_date':'Start Date', 'end_date':'End Date'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'notes', 'start_date', 'end_date']
class RiskProfileModelView(ModelView):
    datamodel = SQLAInterface(RiskProfile)
    list_title = 'List Risk Profile'
    show_title = 'Show Risk Profile'
    edit_title = 'Edit Risk Profile'
    add_title  = 'Add Risk Profile'
 
    list_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # show_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # edit_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    add_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # search_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    description_columns = {
        'id' : 'Unique identifier for each risk profile',
        'name' : 'Name of the risk profile',
        'description' : 'Detailed description of the risk profile',
        'risk_score' : 'Quantitative measure of risk, often based on a specific scoring system',
        'risk_category' : 'Categorization of risk (e.g., Low, Moderate, High)',
        'max_acceptable_loss' : 'Maximum financial loss that is acceptable for this risk profile, usually a percentage or monetary value',
        'probability_of_loss' : 'Likelihood of incurring a loss, often expressed as a percentage',
        'historical_volatility' : 'Measure of the variation in the price of the asset over time',
        'liquidity_rating' : 'Rating representing the ease of converting the asset to cash without significant loss of value',
        'regulatory_compliance' : 'Indication of any specific regulatory compliance considerations relevant to the risk profile',
        'market_sensitivity' : 'Measure of how sensitive the asset is to market fluctuations',
        'credit_rating' : 'Creditworthiness of a debtor, particularly relevant in the context of credit risk',
        'investment_horizon' : 'Expected duration for holding the investment',
        'sector_exposure' : 'Indicates the sectors to which the investment is exposed',
        'geographic_exposure' : 'Highlights the geographical regions involved in the transaction',
    }
    # list_exclude_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # show_exclude_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # edit_exclude_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # add_exclude_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # search_exclude_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # order_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # add_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # add_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    # add_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
    
    label_columns = {'name':'Name', 'description':'Description', 'risk_score':'Risk Score', 'risk_category':'Risk Category', 'max_acceptable_loss':'Max Acceptable Loss', 'probability_of_loss':'Probability Of Loss', 'historical_volatility':'Historical Volatility', 'liquidity_rating':'Liquidity Rating', 'regulatory_compliance':'Regulatory Compliance', 'market_sensitivity':'Market Sensitivity', 'credit_rating':'Credit Rating', 'investment_horizon':'Investment Horizon', 'sector_exposure':'Sector Exposure', 'geographic_exposure':'Geographic Exposure'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'description', 'risk_score', 'risk_category', 'max_acceptable_loss', 'probability_of_loss', 'historical_volatility', 'liquidity_rating', 'regulatory_compliance', 'market_sensitivity', 'credit_rating', 'investment_horizon', 'sector_exposure', 'geographic_exposure']
class TechparamsModelView(ModelView):
    datamodel = SQLAInterface(Techparams)
    list_title = 'List Techparams'
    show_title = 'Show Techparams'
    edit_title = 'Edit Techparams'
    add_title  = 'Add Techparams'
 
    list_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # show_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # edit_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    add_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # search_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    description_columns = {
        'id' : 'None',
        'tp_key' : 'Tech Param Key',
        'tp_value' : 'Tech Param Value',
        'enabled' : 'Is this param used',
        'notes' : 'Notes on this parameter',
    }
    # list_exclude_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # show_exclude_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # edit_exclude_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # add_exclude_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # search_exclude_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # order_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # add_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # add_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    # add_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
    
    label_columns = {'tp_key':'Tp Key', 'tp_value':'Tp Value', 'enabled':'Enabled', 'notes':'Notes'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['tp_key', 'tp_value', 'enabled', 'notes']
class TokenProviderModelView(ModelView):
    datamodel = SQLAInterface(TokenProvider)
    list_title = 'List Token Provider'
    show_title = 'Show Token Provider'
    edit_title = 'Edit Token Provider'
    add_title  = 'Add Token Provider'
 
    list_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # show_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # edit_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    add_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # search_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    description_columns = {
        'id' : 'Unique identifier for the token provider.',
        'name' : 'Name of the token provider.',
        'notes' : 'Additional notes or remarks about the token provider.',
        'priv_key' : 'Private key used for authentication and encryption.',
        'pub_key' : 'Public key used for authentication and encryption.',
        'endpoint' : 'Endpoint URL for communication with the token provider.',
        'protocol' : 'Communication protocol used with the token provider (e.g., HTTPS).',
        'auth' : 'Authentication mechanism or credentials required for access.',
        'ssl' : 'SSL/TLS configuration or settings for secure communication.',
        'ip_whitelist' : 'List of whitelisted IP addresses for accessing the token provider.',
        'password' : 'Password associated with the token provider.',
        'enabled' : 'Indicates if the token provider is enabled or disabled.',
    }
    # list_exclude_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # show_exclude_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # edit_exclude_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # add_exclude_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # search_exclude_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # order_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # add_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # add_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    # add_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
    
    label_columns = {'name':'Name', 'notes':'Notes', 'priv_key':'Priv Key', 'pub_key':'Pub Key', 'endpoint':'Endpoint', 'protocol':'Protocol', 'auth':'Auth', 'ssl':'Ssl', 'ip_whitelist':'Ip Whitelist', 'password':'Password', 'enabled':'Enabled'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'notes', 'priv_key', 'pub_key', 'endpoint', 'protocol', 'auth', 'ssl', 'ip_whitelist', 'password', 'enabled']
class TransRoutingThresholdsModelView(ModelView):
    datamodel = SQLAInterface(TransRoutingThresholds)
    list_title = 'List Trans Routing Thresholds'
    show_title = 'Show Trans Routing Thresholds'
    edit_title = 'Edit Trans Routing Thresholds'
    add_title  = 'Add Trans Routing Thresholds'
 
    list_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # show_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # edit_columns = ['name', 'min_amount', 'max_amount', 'priority']
    add_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # search_columns = ['name', 'min_amount', 'max_amount', 'priority']
    description_columns = {
        'id' : 'Unique identifier for the threshold.',
        'name' : 'Name or description of the threshold.',
        'min_amount' : 'Minimum transaction amount that triggers this threshold.',
        'max_amount' : 'Maximum transaction amount that triggers this threshold.',
        'priority' : 'Priority level for this threshold.',
    }
    # list_exclude_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # show_exclude_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # edit_exclude_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # add_exclude_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # search_exclude_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # order_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # add_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # add_columns = ['name', 'min_amount', 'max_amount', 'priority']
    # add_columns = ['name', 'min_amount', 'max_amount', 'priority']
    
    label_columns = {'name':'Name', 'min_amount':'Min Amount', 'max_amount':'Max Amount', 'priority':'Priority'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'min_amount', 'max_amount', 'priority']
class TransTypeModelView(ModelView):
    datamodel = SQLAInterface(TransType)
    list_title = 'List Trans Type'
    show_title = 'Show Trans Type'
    edit_title = 'Edit Trans Type'
    add_title  = 'Add Trans Type'
 
    list_columns = ['name', 'notes']
    # show_columns = ['name', 'notes']
    # edit_columns = ['name', 'notes']
    add_columns = ['name', 'notes']
    # search_columns = ['name', 'notes']
    description_columns = {
        'id' : 'Unique identifier for the transaction type.',
        'name' : 'Name or title of the transaction type, e.g., Deposit, Withdrawal, Transfer, Bill Payment, etc.',
        'notes' : 'Additional notes or descriptions related to the transaction type.',
    }
    # list_exclude_columns = ['name', 'notes']
    # show_exclude_columns = ['name', 'notes']
    # edit_exclude_columns = ['name', 'notes']
    # add_exclude_columns = ['name', 'notes']
    # search_exclude_columns = ['name', 'notes']
    # order_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    # add_columns = ['name', 'notes']
    
    label_columns = {'name':'Name', 'notes':'Notes'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['name', 'notes']
class UserExtModelView(ModelView):
    datamodel = SQLAInterface(UserExt)
    list_title = 'List User Ext'
    show_title = 'Show User Ext'
    edit_title = 'Edit User Ext'
    add_title  = 'Add User Ext'
 
    list_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # show_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # edit_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    add_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # search_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    description_columns = {
        'id' : 'Unique identifier for the user.',
        'manager_id_fk' : 'Manager ID - References the manager of the user, if applicable.',
        'middle_name' : 'Middle name of the user, if available.',
        'employee_number' : 'Employee number assigned to the user, if applicable.',
        'job_title' : 'Job title or position of the user within the organization.',
        'phone_number' : 'Phone number for contacting the user.',
        'email' : 'Email address of the user, used for communication.',
        'user_data' : 'Additional user data or information, such as user preferences or details.',
    }
    # list_exclude_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # show_exclude_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # edit_exclude_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # add_exclude_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # search_exclude_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # order_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # add_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # add_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    # add_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
    
    label_columns = {'manager':'Manager', 'middle_name':'Middle Name', 'employee_number':'Employee Number', 'job_title':'Job Title', 'phone_number':'Phone Number', 'email':'Email', 'user_data':'User Data'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['manager', 'middle_name', 'employee_number', 'job_title', 'phone_number', 'email', 'user_data']
class BillerModelView(ModelView):
    datamodel = SQLAInterface(Biller)
    list_title = 'List Biller'
    show_title = 'Show Biller'
    edit_title = 'Edit Biller'
    add_title  = 'Add Biller'
 
    list_columns = ['category', 'code', 'name', 'url', 'note']
    # show_columns = ['category', 'code', 'name', 'url', 'note']
    # edit_columns = ['category', 'code', 'name', 'url', 'note']
    add_columns = ['category', 'code', 'name', 'url', 'note']
    # search_columns = ['category', 'code', 'name', 'url', 'note']
    description_columns = {
        'id' : 'Unique identifier for the biller.',
        'category_id_fk' : 'Foreign key referencing the biller category to which this biller belongs.',
        'code' : 'Unique code or identifier for the biller.',
        'name' : 'Name or title of the biller.',
        'url' : 'URL or link associated with the biller.',
        'note' : 'Additional notes or remarks about the biller.',
    }
    # list_exclude_columns = ['category', 'code', 'name', 'url', 'note']
    # show_exclude_columns = ['category', 'code', 'name', 'url', 'note']
    # edit_exclude_columns = ['category', 'code', 'name', 'url', 'note']
    # add_exclude_columns = ['category', 'code', 'name', 'url', 'note']
    # search_exclude_columns = ['category', 'code', 'name', 'url', 'note']
    # order_columns = ['category', 'code', 'name', 'url', 'note']
    # add_columns = ['category', 'code', 'name', 'url', 'note']
    # add_columns = ['category', 'code', 'name', 'url', 'note']
    # add_columns = ['category', 'code', 'name', 'url', 'note']
    
    label_columns = {'category':'Category', 'code':'Code', 'name':'Name', 'url':'Url', 'note':'Note'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['category', 'code', 'name', 'url', 'note']
class StateModelView(ModelView):
    datamodel = SQLAInterface(State)
    list_title = 'List State'
    show_title = 'Show State'
    edit_title = 'Edit State'
    add_title  = 'Add State'
 
    list_columns = ['country', 'code', 'name', 'description']
    # show_columns = ['country', 'code', 'name', 'description']
    # edit_columns = ['country', 'code', 'name', 'description']
    add_columns = ['country', 'code', 'name', 'description']
    # search_columns = ['country', 'code', 'name', 'description']
    description_columns = {
        'country_id_fk' : 'None',
        'id' : 'ID of this column',
        'code' : 'State Code',
        'name' : 'Name of the state',
        'description' : 'Brief description of the state',
    }
    # list_exclude_columns = ['country', 'code', 'name', 'description']
    # show_exclude_columns = ['country', 'code', 'name', 'description']
    # edit_exclude_columns = ['country', 'code', 'name', 'description']
    # add_exclude_columns = ['country', 'code', 'name', 'description']
    # search_exclude_columns = ['country', 'code', 'name', 'description']
    # order_columns = ['country', 'code', 'name', 'description']
    # add_columns = ['country', 'code', 'name', 'description']
    # add_columns = ['country', 'code', 'name', 'description']
    # add_columns = ['country', 'code', 'name', 'description']
    
    label_columns = {'country':'Country', 'code':'Code', 'name':'Name', 'description':'Description'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['country', 'code', 'name', 'description']
class TokenModelView(ModelView):
    datamodel = SQLAInterface(Token)
    list_title = 'List Token'
    show_title = 'Show Token'
    edit_title = 'Edit Token'
    add_title  = 'Add Token'
 
    list_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # show_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # edit_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    add_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # search_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    description_columns = {
        'id' : 'Unique identifier for the token.',
        'token_provider_id_fk' : 'Foreign key referencing the associated token provider.',
        'token_name' : 'Name or identifier for the token.',
        'token_issue_date' : 'Timestamp when the token was issued.',
        'token_expiry_date' : 'Timestamp when the token expires.',
        'token_validity' : 'Duration of token validity in seconds.',
        'token_expired' : 'Indicates if the token has expired.',
        'token_value' : 'Actual token value or token string.',
        'token_username' : 'Username associated with the token.',
        'token_password' : 'Password associated with the token.',
        'token_notes' : 'Additional notes or remarks about the token.',
        'token_client_secret' : 'Client secret associated with the token.',
        'enabled' : 'Indicates if the token is enabled or disabled.',
    }
    # list_exclude_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # show_exclude_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # edit_exclude_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # add_exclude_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # search_exclude_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # order_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # add_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # add_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    # add_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
    
    label_columns = {'token_provider':'Token Provider', 'token_name':'Token Name', 'token_issue_date':'Token Issue Date', 'token_expiry_date':'Token Expiry Date', 'token_validity':'Token Validity', 'token_expired':'Token Expired', 'token_value':'Token Value', 'token_username':'Token Username', 'token_password':'Token Password', 'token_notes':'Token Notes', 'token_client_secret':'Token Client Secret', 'enabled':'Enabled'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['token_provider', 'token_name', 'token_issue_date', 'token_expiry_date', 'token_validity', 'token_expired', 'token_value', 'token_username', 'token_password', 'token_notes', 'token_client_secret', 'enabled']
class BillerOfferingModelView(ModelView):
    datamodel = SQLAInterface(BillerOffering)
    list_title = 'List Biller Offering'
    show_title = 'Show Biller Offering'
    edit_title = 'Edit Biller Offering'
    add_title  = 'Add Biller Offering'
 
    list_columns = ['biller', 'name', 'description', 'price']
    # show_columns = ['biller', 'name', 'description', 'price']
    # edit_columns = ['biller', 'name', 'description', 'price']
    add_columns = ['biller', 'name', 'description', 'price']
    # search_columns = ['biller', 'name', 'description', 'price']
    description_columns = {
        'biller_id_fk' : 'Foreign key referencing the biller to which this offering belongs.',
        'id' : 'Unique identifier for the biller offering.',
        'name' : 'Name or title of the biller offering.',
        'description' : 'Description of the biller offering.',
        'price' : 'Price or cost associated with the biller offering.',
    }
    # list_exclude_columns = ['biller', 'name', 'description', 'price']
    # show_exclude_columns = ['biller', 'name', 'description', 'price']
    # edit_exclude_columns = ['biller', 'name', 'description', 'price']
    # add_exclude_columns = ['biller', 'name', 'description', 'price']
    # search_exclude_columns = ['biller', 'name', 'description', 'price']
    # order_columns = ['biller', 'name', 'description', 'price']
    # add_columns = ['biller', 'name', 'description', 'price']
    # add_columns = ['biller', 'name', 'description', 'price']
    # add_columns = ['biller', 'name', 'description', 'price']
    
    label_columns = {'biller':'Biller', 'name':'Name', 'description':'Description', 'price':'Price'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['biller', 'name', 'description', 'price']
class LgaModelView(ModelView):
    datamodel = SQLAInterface(Lga)
    list_title = 'List Lga'
    show_title = 'Show Lga'
    edit_title = 'Edit Lga'
    add_title  = 'Add Lga'
 
    list_columns = ['state', 'code', 'lga_name']
    # show_columns = ['state', 'code', 'lga_name']
    # edit_columns = ['state', 'code', 'lga_name']
    add_columns = ['state', 'code', 'lga_name']
    # search_columns = ['state', 'code', 'lga_name']
    description_columns = {
        'id' : 'ID of this column',
        'state_id_fk' : 'Foreign Key of the state',
        'code' : 'Local Government Code',
        'lga_name' : 'LGA Name',
    }
    # list_exclude_columns = ['state', 'code', 'lga_name']
    # show_exclude_columns = ['state', 'code', 'lga_name']
    # edit_exclude_columns = ['state', 'code', 'lga_name']
    # add_exclude_columns = ['state', 'code', 'lga_name']
    # search_exclude_columns = ['state', 'code', 'lga_name']
    # order_columns = ['state', 'code', 'lga_name']
    # add_columns = ['state', 'code', 'lga_name']
    # add_columns = ['state', 'code', 'lga_name']
    # add_columns = ['state', 'code', 'lga_name']
    
    label_columns = {'state':'State', 'code':'Code', 'lga_name':'Lga Name'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['state', 'code', 'lga_name']
class AgentModelView(ModelView):
    datamodel = SQLAInterface(Agent)
    list_title = 'List Agent'
    show_title = 'Show Agent'
    edit_title = 'Edit Agent'
    add_title  = 'Add Agent'
 
    list_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # show_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # edit_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    add_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # search_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    description_columns = {
        'id' : 'Unique identifier for the agent.',
        'aggregator_id_fk' : 'References the aggregator agent if applicable.',
        'is_aggregator' : 'Indicates whether the agent is an aggregator.',
        'became_aggregator_date' : 'Timestamp when the agent became an aggregator, if applicable.',
        'assigned_pos_count' : 'Count of assigned point-of-sale (POS) devices.',
        'aggregator_pos_threshold' : 'Threshold for becoming an aggregator based on POS device count.',
        'verification_status' : 'The status of this agent, such as pending, active, etc.',
        'verification_status_notes' : 'Additional notes or remarks about the agents verification status.',
        'agent_type' : 'Type of agent, e.g., Individual, Business.',
        'agent_role' : 'Role of the agent, e.g., agent, sub-agent, aggregator.',
        'agent_tier_id_fk' : 'References the agents tier.',
        'account_manager_id_fk' : 'References the account manager responsible for this agent.',
        'agent_name' : 'Name of the agent.',
        'alias' : 'Alias or alternate name for reporting purposes, if available.',
        'phone_country_id_fk' : 'References the country of the agents phone number.',
        'phone' : 'Primary phone number of the agent.',
        'phone_ext' : 'Extension for the primary phone number.',
        'alt_phone_country_id_fk' : 'References the country of the alternate phone number.',
        'alt_phone' : 'Alternate phone number for the agent.',
        'alt_phone_ext' : 'Extension for the alternate phone number.',
        'email' : 'Email address of the agent.',
        'alt_email' : 'Alternate email address for the agent.',
        'bvn' : 'Bank Verification Number (BVN) of the agent.',
        'bvn_verified' : 'Indicates whether the BVN is verified.',
        'bvn_verification_date' : 'Timestamp of BVN verification.',
        'bvn_verification_code' : 'Verification code for BVN.',
        'tax_id' : 'Tax identification number of the agent.',
        'bank_id_fk' : 'References the bank where the agent has an account.',
        'bank_acc_no' : 'Agent bank account number.',
        'biz_name' : 'Name of the agents business, if applicable.',
        'biz_state_id_fk' : 'References the state where the business is located.',
        'biz_lga_id_fk' : 'References the LGA where the business is located.',
        'biz_city' : 'City where the business is located.',
        'biz_city_area' : 'Specific area within the city where the business is located.',
        'biz_street' : 'Street address of the business.',
        'biz_building' : 'Building name or number of the business location.',
        'biz_address' : 'Detailed address information for the business.',
        'biz_poa_img' : 'Image of Proof of Address (POA) for the business.',
        'biz_poa_desc' : 'Description of the Proof of Address document.',
        'biz_poa_valid' : 'Indicates if the Proof of Address is valid.',
        'biz_lat' : 'Latitude coordinates of the business location.',
        'biz_lon' : 'Longitude coordinates of the business location.',
        'biz_loc' : 'Location description of the business.',
        'biz_ggl_code' : 'Google Maps code for the business location.',
        'company_name' : 'Name of the company associated with the agent.',
        'cac_number' : 'Corporate Affairs Commission (CAC) registration number.',
        'cac_reg_date' : 'Date of CAC registration.',
        'cac_cert_img' : 'Image of the CAC certificate.',
        'cac_cert_no' : 'Certificate number issued by CAC.',
        'ref_code' : 'Reference code associated with the agent.',
        'access_pin' : 'Access PIN for agent transactions.',
        'registered_by_id_fk' : 'References the user who registered the agent.',
        'registration_date' : 'Timestamp of agent registration.',
        'reviewed_by_id_fk' : 'References the user who reviewed the agent.',
        'review_date' : 'Timestamp of agent review.',
        'approved_by_id_fk' : 'References the user who approved the agent.',
        'approval_date' : 'Timestamp of agent approval.',
        'approval_narrative' : 'Narrative or notes related to agent approval.',
        'kyc_submit_date' : 'Timestamp of KYC document submission.',
        'kyc_verification_status' : 'KYC verification status, e.g., pending, approved.',
        'kyc_approval_date' : 'Timestamp of KYC document approval.',
        'kyc_ref_code' : 'Reference code associated with KYC.',
        'kyc_rejection_narrative' : 'Narrative or notes related to KYC rejection.',
        'kyc_rejection_by_id_fk' : 'References the user who rejected KYC.',
        'rejection_date' : 'Timestamp of agent rejection.',
        'rejection_narrative' : 'Narrative or notes related to agent rejection.',
        'rejected_by_id_fk' : 'References the user who rejected the agent.',
        'face_matrix' : 'Biometric data for face recognition.',
        'finger_print_img' : 'Image of fingerprint data.',
        'agent_public_key' : 'Public key for cryptographic operations.',
        'agent_pj_expiry' : 'Timestamp of public key expiration.',
        'agent_history' : 'Textual history of agent-related events.',
    }
    # list_exclude_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # show_exclude_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # edit_exclude_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # add_exclude_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # search_exclude_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # order_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # add_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # add_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    # add_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
    
    label_columns = {'aggregator':'Aggregator', 'is_aggregator':'Is Aggregator', 'became_aggregator_date':'Became Aggregator Date', 'assigned_pos_count':'Assigned Pos Count', 'aggregator_pos_threshold':'Aggregator Pos Threshold', 'verification_status':'Verification Status', 'verification_status_notes':'Verification Status Notes', 'agent_type':'Agent Type', 'agent_role':'Agent Role', 'agent_tier':'Agent Tier', 'account_manager':'Account Manager', 'agent_name':'Agent Name', 'alias':'Alias', 'phone_country':'Phone Country', 'phone':'Phone', 'phone_ext':'Phone Ext', 'alt_phone_country':'Alt Phone Country', 'alt_phone':'Alt Phone', 'alt_phone_ext':'Alt Phone Ext', 'email':'Email', 'alt_email':'Alt Email', 'bvn':'Bvn', 'bvn_verified':'Bvn Verified', 'bvn_verification_date':'Bvn Verification Date', 'bvn_verification_code':'Bvn Verification Code', 'tax_id':'Tax Id', 'bank':'Bank', 'bank_acc_no':'Bank Acc No', 'biz_name':'Biz Name', 'biz_state':'Biz State', 'biz_lga':'Biz Lga', 'biz_city':'Biz City', 'biz_city_area':'Biz City Area', 'biz_street':'Biz Street', 'biz_building':'Biz Building', 'biz_address':'Biz Address', 'biz_poa_img':'Biz Poa Img', 'biz_poa_desc':'Biz Poa Desc', 'biz_poa_valid':'Biz Poa Valid', 'biz_lat':'Biz Lat', 'biz_lon':'Biz Lon', 'biz_loc':'Biz Loc', 'biz_ggl_code':'Biz Ggl Code', 'company_name':'Company Name', 'cac_number':'Cac Number', 'cac_reg_date':'Cac Reg Date', 'cac_cert_img':'Cac Cert Img', 'cac_cert_no':'Cac Cert No', 'ref_code':'Ref Code', 'access_pin':'Access Pin', 'registered_by':'Registered By', 'registration_date':'Registration Date', 'reviewed_by':'Reviewed By', 'review_date':'Review Date', 'approved_by':'Approved By', 'approval_date':'Approval Date', 'approval_narrative':'Approval Narrative', 'kyc_submit_date':'Kyc Submit Date', 'kyc_verification_status':'Kyc Verification Status', 'kyc_approval_date':'Kyc Approval Date', 'kyc_ref_code':'Kyc Ref Code', 'kyc_rejection_narrative':'Kyc Rejection Narrative', 'kyc_rejection_by':'Kyc Rejection By', 'rejection_date':'Rejection Date', 'rejection_narrative':'Rejection Narrative', 'rejected_by':'Rejected By', 'face_matrix':'Face Matrix', 'finger_print_img':'Finger Print Img', 'agent_public_key':'Agent Public Key', 'agent_pj_expiry':'Agent Pj Expiry', 'agent_history':'Agent History'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['aggregator', 'is_aggregator', 'became_aggregator_date', 'assigned_pos_count', 'aggregator_pos_threshold', 'verification_status', 'verification_status_notes', 'agent_type', 'agent_role', 'agent_tier', 'account_manager', 'agent_name', 'alias', 'phone_country', 'phone', 'phone_ext', 'alt_phone_country', 'alt_phone', 'alt_phone_ext', 'email', 'alt_email', 'bvn', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'bank', 'bank_acc_no', 'biz_name', 'biz_state', 'biz_lga', 'biz_city', 'biz_city_area', 'biz_street', 'biz_building', 'biz_address', 'biz_poa_img', 'biz_poa_desc', 'biz_poa_valid', 'biz_lat', 'biz_lon', 'biz_loc', 'biz_ggl_code', 'company_name', 'cac_number', 'cac_reg_date', 'cac_cert_img', 'cac_cert_no', 'ref_code', 'access_pin', 'registered_by', 'registration_date', 'reviewed_by', 'review_date', 'approved_by', 'approval_date', 'approval_narrative', 'kyc_submit_date', 'kyc_verification_status', 'kyc_approval_date', 'kyc_ref_code', 'kyc_rejection_narrative', 'kyc_rejection_by', 'rejection_date', 'rejection_narrative', 'rejected_by', 'face_matrix', 'finger_print_img', 'agent_public_key', 'agent_pj_expiry', 'agent_history']
class PosModelView(ModelView):
    datamodel = SQLAInterface(Pos)
    list_title = 'List Pos'
    show_title = 'Show Pos'
    edit_title = 'Edit Pos'
    add_title  = 'Add Pos'
 
    list_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # show_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # edit_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    add_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # search_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    description_columns = {
        'id' : 'Unique identifier for the Point of Sale (PoS).',
        'serial_no' : 'Unique serial number for the PoS.',
        'imei' : 'IMEI number of the PoS, if applicable.',
        'mac_addr' : 'MAC address of the PoS.',
        'device_model' : 'Model of the PoS device.',
        'device_make' : 'Make or manufacturer of the PoS device.',
        'device_mfg' : 'Manufacturer of the PoS device.',
        'os_version' : 'Operating system version of the PoS.',
        'device_color' : 'Color of the PoS device.',
        'device_condition' : 'Condition of the PoS device (e.g., working, irreparable, repaired).',
        'status' : 'Current status of the PoS.',
        'owner_type' : 'Type of owner of the PoS.',
        'registration_date' : 'Timestamp when the PoS was registered.',
        'assigned' : 'Indicates if the PoS is assigned.',
        'assigned_date' : 'Timestamp when the PoS was assigned.',
        'assigned_narrative' : 'Narrative or description of the assignment.',
        'active' : 'Indicates if the PoS is active.',
        'activation_date' : 'Timestamp when the PoS was activated.',
        'last_active' : 'Timestamp of the last activity.',
        'deployed' : 'Indicates if the PoS is deployed.',
        'deploy_date' : 'Timestamp when the PoS was deployed.',
        'deploy_narrative' : 'Narrative or description of the deployment.',
        'returned' : 'Indicates if the PoS was returned.',
        'return_date' : 'Timestamp when the PoS was returned.',
        'return_narrative' : 'Narrative or description of the return.',
        'return_received_date' : 'Timestamp when the return was received.',
        'return_received_by_id_fk' : 'Reference to the user who received the return.',
        'state_id_fk' : 'Reference to the state where the PoS is deployed.',
        'lga_id_fk' : 'Reference to the local government area where the PoS is deployed.',
        'street_address' : 'Street address of the PoS deployment location.',
        'building_name' : 'Name of the building where the PoS is deployed.',
        'contact_phone_num' : 'Contact phone number for the PoS deployment location.',
        'pos_user' : 'User associated with the PoS.',
        'crypt_priv_key' : 'Private key for cryptographic operations.',
        'crypt_pub_key' : 'Public key for cryptographic operations.',
        'crypt_password' : 'Password for cryptographic operations.',
        'override_key' : 'Override key for cryptographic operations.',
    }
    # list_exclude_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # show_exclude_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # edit_exclude_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # add_exclude_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # search_exclude_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # order_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # add_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # add_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    # add_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
    
    label_columns = {'serial_no':'Serial No', 'imei':'Imei', 'mac_addr':'Mac Addr', 'device_model':'Device Model', 'device_make':'Device Make', 'device_mfg':'Device Mfg', 'os_version':'Os Version', 'device_color':'Device Color', 'device_condition':'Device Condition', 'status':'Status', 'owner_type':'Owner Type', 'registration_date':'Registration Date', 'assigned':'Assigned', 'assigned_date':'Assigned Date', 'assigned_narrative':'Assigned Narrative', 'active':'Active', 'activation_date':'Activation Date', 'last_active':'Last Active', 'deployed':'Deployed', 'deploy_date':'Deploy Date', 'deploy_narrative':'Deploy Narrative', 'returned':'Returned', 'return_date':'Return Date', 'return_narrative':'Return Narrative', 'return_received_date':'Return Received Date', 'return_received_by':'Return Received By', 'state':'State', 'lga':'Lga', 'street_address':'Street Address', 'building_name':'Building Name', 'contact_phone_num':'Contact Phone Num', 'pos_user':'Pos User', 'crypt_priv_key':'Crypt Priv Key', 'crypt_pub_key':'Crypt Pub Key', 'crypt_password':'Crypt Password', 'override_key':'Override Key'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['serial_no', 'imei', 'mac_addr', 'device_model', 'device_make', 'device_mfg', 'os_version', 'device_color', 'device_condition', 'status', 'owner_type', 'registration_date', 'assigned', 'assigned_date', 'assigned_narrative', 'active', 'activation_date', 'last_active', 'deployed', 'deploy_date', 'deploy_narrative', 'returned', 'return_date', 'return_narrative', 'return_received_date', 'return_received_by', 'state', 'lga', 'street_address', 'building_name', 'contact_phone_num', 'pos_user', 'crypt_priv_key', 'crypt_pub_key', 'crypt_password', 'override_key']
class AgentPosLinkModelView(ModelView):
    datamodel = SQLAInterface(AgentPosLink)
    list_title = 'List Agent Pos Link'
    show_title = 'Show Agent Pos Link'
    edit_title = 'Edit Agent Pos Link'
    add_title  = 'Add Agent Pos Link'
 
    list_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # show_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # edit_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    add_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # search_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    description_columns = {
        'agent_id_fk' : 'Foreign key reference to the agent to whom the PoS is assigned.',
        'pos_id_fk' : 'Foreign key reference to the Point of Sale (PoS) being assigned.',
        'assigned_date' : 'Timestamp when the PoS is assigned.',
        'assigned_by' : 'User who assigned the PoS to the agent.',
        'received_by' : 'User who received the PoS.',
        'received_date' : 'Timestamp when the PoS is received by the agent.',
        'received_location' : 'Location where the PoS is received.',
        'delivery_note' : 'Delivery note associated with the PoS assignment.',
        'delivery_note_printed' : 'Indicates whether the delivery note has been printed.',
        'activated' : 'Indicates whether the PoS has been activated.',
        'activation_date' : 'Timestamp when the PoS is activated.',
        'activation_otp' : 'One-Time Password (OTP) used for activation.',
        'otp_sent' : 'Indicates whether the OTP has been sent.',
        'otp_sent_time' : 'Timestamp when the OTP is sent.',
        'otp_used' : 'Indicates whether the OTP has been used for activation.',
        'history' : 'Text field to store the history or additional information about the PoS assignment.',
    }
    # list_exclude_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # show_exclude_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # edit_exclude_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # add_exclude_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # search_exclude_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # order_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # add_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # add_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    # add_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
    
    label_columns = {'agent':'Agent', 'pos':'Pos', 'assigned_date':'Assigned Date', 'assigned_by':'Assigned By', 'received_by':'Received By', 'received_date':'Received Date', 'received_location':'Received Location', 'delivery_note':'Delivery Note', 'delivery_note_printed':'Delivery Note Printed', 'activated':'Activated', 'activation_date':'Activation Date', 'activation_otp':'Activation Otp', 'otp_sent':'Otp Sent', 'otp_sent_time':'Otp Sent Time', 'otp_used':'Otp Used', 'history':'History'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['agent', 'pos', 'assigned_date', 'assigned_by', 'received_by', 'received_date', 'received_location', 'delivery_note', 'delivery_note_printed', 'activated', 'activation_date', 'activation_otp', 'otp_sent', 'otp_sent_time', 'otp_used', 'history']
class CommissionModelView(ModelView):
    datamodel = SQLAInterface(Commission)
    list_title = 'List Commission'
    show_title = 'Show Commission'
    edit_title = 'Edit Commission'
    add_title  = 'Add Commission'
 
    list_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # show_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # edit_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    add_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # search_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    description_columns = {
        'id' : 'Unique identifier for the commission reference.',
        'agent_type' : 'Type of agent, e.g., Individual, Business, etc.',
        'agent_tier_level_id_fk' : 'Foreign key to the agent tier level if applicable.',
        'agent_id_fk' : 'Foreign key to the agent associated with this commission reference.',
        'state_id_fk' : 'Foreign key to the state if applicable.',
        'lga_id_fk' : 'Foreign key to the local government area if applicable.',
        'currency_id_fk' : 'Commission of specfic currencies, defaults to NGN',
        'risk_profile_id_fk' : 'Risk associated with financial transactions',
        'biller_id_fk' : 'Foreign key to the biller associated with this commission reference.',
        'biller_offering_id_fk' : 'Foreign key to the biller offering associated with this commission reference.',
        'transaction_type_id_fk' : 'Foreign key to the transaction type if applicable.',
        'customer_segment_id_fk' : 'Foreign key to the customer segment.',
        'special_promotion_id_fk' : 'Foreign key to the special promotion if applicable.',
        'min_trans_amount' : 'Minimum transaction amount for commission calculation.',
        'max_trans_amount' : 'Maximum transaction amount for commission calculation.',
        'min_max_step' : 'Step value for minimum and maximum transaction amounts.',
        'min_comm_amount' : 'Minimum commission amount.',
        'max_comm_amount' : 'Maximum commission amount.',
        'commission_rate' : 'Commission rate in percentage.',
        'start_time' : 'Start time of commission rate validity.',
        'end_time' : 'End time of commission rate validity.',
        'start_date' : 'Start date of commission rate validity (if applicable).',
        'end_date' : 'End date of commission rate validity (if applicable).',
    }
    # list_exclude_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # show_exclude_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # edit_exclude_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # add_exclude_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # search_exclude_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # order_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # add_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # add_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    # add_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
    
    label_columns = {'agent_type':'Agent Type', 'agent_tier_level':'Agent Tier Level', 'agent':'Agent', 'state':'State', 'lga':'Lga', 'currency':'Currency', 'risk_profile':'Risk Profile', 'biller':'Biller', 'biller_offering':'Biller Offering', 'transaction_type':'Transaction Type', 'customer_segment':'Customer Segment', 'special_promotion':'Special Promotion', 'min_trans_amount':'Min Trans Amount', 'max_trans_amount':'Max Trans Amount', 'min_max_step':'Min Max Step', 'min_comm_amount':'Min Comm Amount', 'max_comm_amount':'Max Comm Amount', 'commission_rate':'Commission Rate', 'start_time':'Start Time', 'end_time':'End Time', 'start_date':'Start Date', 'end_date':'End Date'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['agent_type', 'agent_tier_level', 'agent', 'state', 'lga', 'currency', 'risk_profile', 'biller', 'biller_offering', 'transaction_type', 'customer_segment', 'special_promotion', 'min_trans_amount', 'max_trans_amount', 'min_max_step', 'min_comm_amount', 'max_comm_amount', 'commission_rate', 'start_time', 'end_time', 'start_date', 'end_date']
class PersonModelView(ModelView):
    datamodel = SQLAInterface(Person)
    list_title = 'List Person'
    show_title = 'Show Person'
    edit_title = 'Edit Person'
    add_title  = 'Add Person'
 
    list_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # show_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # edit_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    add_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # search_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    description_columns = {
        'id' : 'Unique identifier for the person.',
        'agent_id_fk' : 'References the associated agent if applicable.',
        'next_of_kin_id_fk' : 'References the next of kin for this person, if applicable.',
        'person_role' : 'Role or type of person, e.g., customer, contact.',
        'first_name' : 'First name of the person.',
        'middle_name' : 'Middle name of the person.',
        'surname' : 'Last name or surname of the person.',
        'nick_name' : 'Nickname or alias of the person.',
        'gender' : 'Gender of the person, e.g., Male, Female.',
        'photo_img' : 'Image of the person.',
        'signature_img' : 'Image of the persons signature.',
        'bvn_no' : 'Bank Verification Number (BVN) of the person.',
        'bvn_verified' : 'Indicates whether the BVN is verified.',
        'bvn_verification_date' : 'Timestamp of BVN verification.',
        'bvn_verification_code' : 'Verification code for BVN.',
        'tax_id' : 'Tax identification number of the person.',
        'home_poa_img' : 'Image of Proof of Address (POA) for the home address.',
        'home_poa_desc' : 'Description of the Proof of Address document for the home address.',
        'home_poa_valid' : 'Indicates if the Proof of Address for the home is valid.',
        'home_lat' : 'Latitude coordinates of the home address.',
        'home_lon' : 'Longitude coordinates of the home address.',
        'home_loc' : 'Location description of the home address.',
        'home_ggl_code' : 'Google Maps code for the home address.',
    }
    # list_exclude_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # show_exclude_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # edit_exclude_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # add_exclude_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # search_exclude_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # order_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # add_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # add_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    # add_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
    
    label_columns = {'agent':'Agent', 'next_of_kin':'Next Of Kin', 'person_role':'Person Role', 'first_name':'First Name', 'middle_name':'Middle Name', 'surname':'Surname', 'nick_name':'Nick Name', 'gender':'Gender', 'photo_img':'Photo Img', 'signature_img':'Signature Img', 'bvn_no':'Bvn No', 'bvn_verified':'Bvn Verified', 'bvn_verification_date':'Bvn Verification Date', 'bvn_verification_code':'Bvn Verification Code', 'tax_id':'Tax Id', 'home_poa_img':'Home Poa Img', 'home_poa_desc':'Home Poa Desc', 'home_poa_valid':'Home Poa Valid', 'home_lat':'Home Lat', 'home_lon':'Home Lon', 'home_loc':'Home Loc', 'home_ggl_code':'Home Ggl Code'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['agent', 'next_of_kin', 'person_role', 'first_name', 'middle_name', 'surname', 'nick_name', 'gender', 'photo_img', 'signature_img', 'bvn_no', 'bvn_verified', 'bvn_verification_date', 'bvn_verification_code', 'tax_id', 'home_poa_img', 'home_poa_desc', 'home_poa_valid', 'home_lat', 'home_lon', 'home_loc', 'home_ggl_code']
class WalletModelView(ModelView):
    datamodel = SQLAInterface(Wallet)
    list_title = 'List Wallet'
    show_title = 'Show Wallet'
    edit_title = 'Edit Wallet'
    add_title  = 'Add Wallet'
 
    list_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # show_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # edit_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    add_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # search_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    description_columns = {
        'id' : 'Unique identifier for the wallet.',
        'agent_id_fk' : 'Foreign key reference to the agent associated with the wallet.',
        'pos_id_fk' : 'Foreign key reference to the Point of Sale (PoS) associated with the wallet.',
        'wallet_name' : 'Name of the wallet.',
        'wallet_balance' : 'The balance or amount of funds in the wallet.',
        'wallet_locked' : 'Indicates whether the wallet is locked.',
        'wallet_active' : 'Indicates whether the wallet is active.',
        'wallet_code' : 'Code or identifier associated with the wallet for security purposes.',
        'wallet_crypt' : 'Cryptographic information related to the wallet.',
        'wallet_narrative' : 'Narrative or additional information about the wallet.',
    }
    # list_exclude_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # show_exclude_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # edit_exclude_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # add_exclude_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # search_exclude_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # order_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # add_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # add_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    # add_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
    
    label_columns = {'agent':'Agent', 'pos':'Pos', 'wallet_name':'Wallet Name', 'wallet_balance':'Wallet Balance', 'wallet_locked':'Wallet Locked', 'wallet_active':'Wallet Active', 'wallet_code':'Wallet Code', 'wallet_crypt':'Wallet Crypt', 'wallet_narrative':'Wallet Narrative'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['agent', 'pos', 'wallet_name', 'wallet_balance', 'wallet_locked', 'wallet_active', 'wallet_code', 'wallet_crypt', 'wallet_narrative']
class AgentPersonLinkModelView(ModelView):
    datamodel = SQLAInterface(AgentPersonLink)
    list_title = 'List Agent Person Link'
    show_title = 'Show Agent Person Link'
    edit_title = 'Edit Agent Person Link'
    add_title  = 'Add Agent Person Link'
 
    list_columns = ['person', 'agent']
    # show_columns = ['person', 'agent']
    # edit_columns = ['person', 'agent']
    add_columns = ['person', 'agent']
    # search_columns = ['person', 'agent']
    description_columns = {
        'person_id_fk' : 'Foreign key reference to the person linked to the agent.',
        'agent_id_fk' : 'Foreign key reference to the agent linked to the person.',
    }
    # list_exclude_columns = ['person', 'agent']
    # show_exclude_columns = ['person', 'agent']
    # edit_exclude_columns = ['person', 'agent']
    # add_exclude_columns = ['person', 'agent']
    # search_exclude_columns = ['person', 'agent']
    # order_columns = ['person', 'agent']
    # add_columns = ['person', 'agent']
    # add_columns = ['person', 'agent']
    # add_columns = ['person', 'agent']
    
    label_columns = {'person':'Person', 'agent':'Agent'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['person', 'agent']
class ContactModelView(ModelView):
    datamodel = SQLAInterface(Contact)
    list_title = 'List Contact'
    show_title = 'Show Contact'
    edit_title = 'Edit Contact'
    add_title  = 'Add Contact'
 
    list_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # show_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # edit_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    add_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # search_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    description_columns = {
        'id' : 'Unique identifier for the contact.',
        'person_id_fk' : 'Reference to the individual associated with this contact.',
        'agent_id_fk' : 'Reference to the organization associated with this contact.',
        'contact_type_id_fk' : 'Reference to the type of contact.',
        'contact' : 'Actual contact value, e.g., phone number or email address.',
        'priority' : 'Ordering priority for displaying or using the contact. Lower value indicates higher priority.',
        'best_time_to_contact_start' : 'Preferred start time when the individual/organization is available for contact.',
        'best_time_to_contact_end' : 'Preferred end time for availability.',
        'active_from_date' : 'Date when this contact became active or relevant.',
        'active_to_date' : 'Date when this contact ceases to be active or relevant.',
        'for_business_use' : 'Indicates if the contact is primarily for business purposes.',
        'for_personal_use' : 'Indicates if the contact is primarily for personal use.',
        'do_not_use' : 'Indicates if there are any restrictions or requests not to use this contact.',
        'is_active' : 'Indicates if this contact is currently active and usable.',
        'is_blocked' : 'Indicates if this contact is blocked, maybe due to spam or other reasons.',
        'is_verified' : 'Indicates if this contact has been verified, e.g., via OTP or email confirmation.',
        'notes' : 'Additional notes or context about the contact.',
    }
    # list_exclude_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # show_exclude_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # edit_exclude_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # add_exclude_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # search_exclude_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # order_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # add_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # add_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    # add_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
    
    label_columns = {'person':'Person', 'agent':'Agent', 'contact_type':'Contact Type', 'contact':'Contact', 'priority':'Priority', 'best_time_to_contact_start':'Best Time To Contact Start', 'best_time_to_contact_end':'Best Time To Contact End', 'active_from_date':'Active From Date', 'active_to_date':'Active To Date', 'for_business_use':'For Business Use', 'for_personal_use':'For Personal Use', 'do_not_use':'Do Not Use', 'is_active':'Is Active', 'is_blocked':'Is Blocked', 'is_verified':'Is Verified', 'notes':'Notes'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['person', 'agent', 'contact_type', 'contact', 'priority', 'best_time_to_contact_start', 'best_time_to_contact_end', 'active_from_date', 'active_to_date', 'for_business_use', 'for_personal_use', 'do_not_use', 'is_active', 'is_blocked', 'is_verified', 'notes']
class DocModelView(ModelView):
    datamodel = SQLAInterface(Doc)
    list_title = 'List Doc'
    show_title = 'Show Doc'
    edit_title = 'Edit Doc'
    add_title  = 'Add Doc'
 
    list_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # show_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # edit_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    add_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # search_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    description_columns = {
        'id' : 'Unique identifier for the document.',
        'doc_type_id_fk' : 'References the type of document e.g. passport, license.',
        'person_id_fk' : 'The person to whom the document belongs.',
        'agent_id_fk' : 'The organization associated with the document.',
        'doc_front_img' : 'Image of the front of the document',
        'doc_back_img' : 'Image of the back of the document',
        'doc_name' : 'Name or title of the document.',
        'doc_content_type_id_fk' : 'MIME type of the document content e.g. application/pdf, image/jpeg.',
        'doc_url' : 'Actual doc in pdf or other format',
        'doc_length' : 'Size of the document in bytes or another measure.',
        'doc_text' : 'Text content extracted from the document. Useful for search and analytics. May be stored in another database for scalability.',
        'identification_number' : 'Unique identification number, e.g., passport number.',
        'serial_number' : 'Serial number of the document if applicable.',
        'description' : 'Detailed description or remarks about the document.',
        'file_name' : 'Name of the file if stored digitally.',
        'page_count' : 'Number of pages in the document, if applicable.',
        'issued_on' : 'The date when the document was issued.',
        'issued_by_authority' : 'Authority or organization that issued the document.',
        'issued_at' : 'Place or location where the document was issued.',
        'expires_on' : 'Expiration date of the document.',
        'is_expired' : 'Flag to indicate if the document has expired.',
        'verified' : 'None',
        'verification_date' : 'The date when the document was verified.',
        'verification_code' : 'None',
        'uploaded_on' : 'Timestamp when the document was uploaded into the system.',
        'updated_on' : 'Timestamp when the document record was last updated.',
    }
    # list_exclude_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # show_exclude_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # edit_exclude_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # add_exclude_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # search_exclude_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # order_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # add_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # add_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    # add_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
    
    label_columns = {'doc_type':'Doc Type', 'person':'Person', 'agent':'Agent', 'doc_front_img':'Doc Front Img', 'doc_back_img':'Doc Back Img', 'doc_name':'Doc Name', 'doc_content_type':'Doc Content Type', 'doc_url':'Doc Url', 'doc_length':'Doc Length', 'doc_text':'Doc Text', 'identification_number':'Identification Number', 'serial_number':'Serial Number', 'description':'Description', 'file_name':'File Name', 'page_count':'Page Count', 'issued_on':'Issued On', 'issued_by_authority':'Issued By Authority', 'issued_at':'Issued At', 'expires_on':'Expires On', 'is_expired':'Is Expired', 'verified':'Verified', 'verification_date':'Verification Date', 'verification_code':'Verification Code', 'uploaded_on':'Uploaded On', 'updated_on':'Updated On'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['doc_type', 'person', 'agent', 'doc_front_img', 'doc_back_img', 'doc_name', 'doc_content_type', 'doc_url', 'doc_length', 'doc_text', 'identification_number', 'serial_number', 'description', 'file_name', 'page_count', 'issued_on', 'issued_by_authority', 'issued_at', 'expires_on', 'is_expired', 'verified', 'verification_date', 'verification_code', 'uploaded_on', 'updated_on']
class PersonAdminDataModelView(ModelView):
    datamodel = SQLAInterface(PersonAdminData)
    list_title = 'List Person Admin Data'
    show_title = 'Show Person Admin Data'
    edit_title = 'Edit Person Admin Data'
    add_title  = 'Add Person Admin Data'
 
    list_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # show_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # edit_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    add_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # search_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    description_columns = {
        'person_id_fk' : 'References the associated person.',
        'creation_time' : 'Timestamp when the data was created.',
        'failed_login_count' : 'Count of failed login attempts.',
        'failed_login_timestamp' : 'Timestamp of the last failed login attempt.',
        'password_last_set_time' : 'Timestamp when the password was last set.',
        'profile_picture' : 'URL or path to the profile picture.',
        'awatar' : 'URL or path to the avatar.',
        'screen_name' : 'Screen name or username.',
        'user_priv_cert' : 'Users private certificate.',
        'user_pub_cert' : 'Users public certificate.',
        'alt_security_identities' : 'Alternate security identities.',
        'generated_UID' : 'Generated unique identifier.',
        'do_not_email' : 'Indicates if email communication is prohibited.',
        'do_not_phone' : 'Indicates if phone communication is prohibited.',
        'do_not_mail' : 'Indicates if physical mail communication is prohibited.',
        'do_not_sms' : 'Indicates if SMS communication is prohibited.',
        'do_not_trade' : 'Indicates if trading is prohibited.',
        'opted_out' : 'Indicates if the user has opted out of certain activities.',
        'do_not_track_update_date' : 'Date when tracking was disabled.',
        'do_not_process_from_update_date' : 'Date when processing was disabled.',
        'do_not_market_from_update_date' : 'Date when marketing was disabled.',
        'do_not_track_location_update_date' : 'Date when location tracking was disabled.',
        'do_not_profile_from_update_date' : 'Date when profiling was disabled.',
        'do_forget_me_from_update_date' : 'Date when -forget me- request was processed.',
        'do_not_process_reason' : 'Reason for not processing data.',
        'no_merge_reason' : 'Reason for not merging data.',
        'do_extract_my_data_update_date' : 'Date when data extraction request was processed.',
        'should_forget' : 'Indicates if data should be forgotten.',
        'consumer_credit_score_provider_name' : 'Name of the consumer credit score provider.',
        'web_site_url' : 'URL of the website.',
        'ordering_name' : 'Name used for ordering.',
        'hospitalizations_last5_years_count' : 'Count of hospitalizations in the last 5 years.',
        'surgeries_last5_years_count' : 'Count of surgeries in the last 5 years.',
        'dependent_count' : 'Count of dependents.',
        'account_locked' : 'Indicates if the account is locked.',
        'send_individual_data' : 'Indicates if individual data should be sent.',
        'influencer_rating' : 'Influencer rating.',
    }
    # list_exclude_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # show_exclude_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # edit_exclude_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # add_exclude_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # search_exclude_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # order_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # add_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # add_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    # add_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
    
    label_columns = {'person':'Person', 'creation_time':'Creation Time', 'failed_login_count':'Failed Login Count', 'failed_login_timestamp':'Failed Login Timestamp', 'password_last_set_time':'Password Last Set Time', 'profile_picture':'Profile Picture', 'awatar':'Awatar', 'screen_name':'Screen Name', 'user_priv_cert':'User Priv Cert', 'user_pub_cert':'User Pub Cert', 'alt_security_identities':'Alt Security Identities', 'generated_UID':'Generated Uid', 'do_not_email':'Do Not Email', 'do_not_phone':'Do Not Phone', 'do_not_mail':'Do Not Mail', 'do_not_sms':'Do Not Sms', 'do_not_trade':'Do Not Trade', 'opted_out':'Opted Out', 'do_not_track_update_date':'Do Not Track Update Date', 'do_not_process_from_update_date':'Do Not Process From Update Date', 'do_not_market_from_update_date':'Do Not Market From Update Date', 'do_not_track_location_update_date':'Do Not Track Location Update Date', 'do_not_profile_from_update_date':'Do Not Profile From Update Date', 'do_forget_me_from_update_date':'Do Forget Me From Update Date', 'do_not_process_reason':'Do Not Process Reason', 'no_merge_reason':'No Merge Reason', 'do_extract_my_data_update_date':'Do Extract My Data Update Date', 'should_forget':'Should Forget', 'consumer_credit_score_provider_name':'Consumer Credit Score Provider Name', 'web_site_url':'Web Site Url', 'ordering_name':'Ordering Name', 'hospitalizations_last5_years_count':'Hospitalizations Last5 Years Count', 'surgeries_last5_years_count':'Surgeries Last5 Years Count', 'dependent_count':'Dependent Count', 'account_locked':'Account Locked', 'send_individual_data':'Send Individual Data', 'influencer_rating':'Influencer Rating'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['person', 'creation_time', 'failed_login_count', 'failed_login_timestamp', 'password_last_set_time', 'profile_picture', 'awatar', 'screen_name', 'user_priv_cert', 'user_pub_cert', 'alt_security_identities', 'generated_UID', 'do_not_email', 'do_not_phone', 'do_not_mail', 'do_not_sms', 'do_not_trade', 'opted_out', 'do_not_track_update_date', 'do_not_process_from_update_date', 'do_not_market_from_update_date', 'do_not_track_location_update_date', 'do_not_profile_from_update_date', 'do_forget_me_from_update_date', 'do_not_process_reason', 'no_merge_reason', 'do_extract_my_data_update_date', 'should_forget', 'consumer_credit_score_provider_name', 'web_site_url', 'ordering_name', 'hospitalizations_last5_years_count', 'surgeries_last5_years_count', 'dependent_count', 'account_locked', 'send_individual_data', 'influencer_rating']
class TransModelView(ModelView):
    datamodel = SQLAInterface(Trans)
    list_title = 'List Trans'
    show_title = 'Show Trans'
    edit_title = 'Edit Trans'
    add_title  = 'Add Trans'
 
    list_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # show_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # edit_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    add_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # search_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    description_columns = {
        'id' : 'Unique identifier for the transaction.',
        'coupon_id_fk' : 'Reference to the associated coupon, if applicable.',
        'customer_name' : 'Name of the customer involved in the transaction.',
        'trans_purpose' : 'Description of the transaction purpose.',
        'customer_id' : 'Identifier for the customer.',
        'transaction_type' : 'Type of transaction (e.g., withdrawal, deposit).',
        'card_trans_type' : 'Type of card transaction (e.g., purchase).',
        'agent_id_fk' : 'Merchant ID.',
        'payment_card_id_fk' : 'Reference to the payment card used.',
        'pos_id_fk' : 'Point of Sale (PoS) ID.',
        'wallet_id_fk' : 'Reference to the wallet used.',
        'biller_id_fk' : 'Reference to the biller involved.',
        'biller_offering_id_fk' : 'Reference to the biller offering used.',
        'trans_time' : 'Timestamp of the transaction.',
        'currency_id_fk' : 'Reference to the currency used.',
        'trans_status' : 'Status of the transaction (e.g., pending, completed).',
        'trans_route_id_fk' : 'Reference to the routing threshold used.',
        'origin_source' : 'Source of funds for the transaction.',
        'origin_ref_code' : 'Reference code associated with the origin of the transaction.',
        'origin_trans_notes' : 'Additional notes about the origin of the transaction.',
        'origin_bank_id_fk' : 'Reference to the originating bank, if applicable.',
        'origin_institution_code' : 'Institution code for the origin.',
        'origin_account_num' : 'Account number associated with the origin.',
        'origin_account_name' : 'Account name associated with the origin.',
        'origin_KYC_Level' : 'KYC (Know Your Customer) level of the origin.',
        'origin_Bank_Verification_Number' : 'Bank Verification Number associated with the origin.',
        'origin_bvn' : 'Used for checking balance of the origin.',
        'session_ref' : 'Reference to the session related to the transaction.',
        'transaction_ref' : 'Reference code for the transaction.',
        'channelCode' : 'Code identifying the transaction channel.',
        'name_enquiry_ref' : 'Reference code for name inquiry related to the transaction.',
        'api_transactionid' : 'API transaction ID.',
        'receipt_no' : 'Receipt number associated with the transaction.',
        'pin_based' : 'Whether the transaction is PIN-based.',
        'pin_code' : 'PIN code associated with the transaction.',
        'pin_option' : 'PIN option for the transaction.',
        'authorization_code' : 'Authorization code for the transaction.',
        'acquirer_name' : 'Name of the acquirer.',
        'currency' : 'Currency used for the transaction.',
        'transaction_location' : 'Location where the transaction occurred.',
        'payment_reference' : 'Reference code for the payment.',
        'response_code' : 'Response code related to the transaction.',
        'trans_dest' : 'Destination of funds for the transaction.',
        'bene_ref_code' : 'Reference code associated with the beneficiary.',
        'bene_trans_notes' : 'Additional notes about the beneficiary.',
        'bene_bank_id_fk' : 'Reference to the beneficiary bank, if applicable.',
        'bene_account_num' : 'Account number associated with the beneficiary.',
        'bene_institution_code' : 'Institution code for the beneficiary.',
        'bene_bank_verification_number' : 'Bank Verification Number associated with the beneficiary.',
        'bene_KYC_Level' : 'KYC (Know Your Customer) level of the beneficiary.',
        'bene_account_name' : 'Account name associated with the beneficiary.',
        'bene_phone_number' : 'Phone number associated with the beneficiary.',
        'bene_phone_denom' : 'Denomination of the beneficiary phone.',
        'bene_phone_product' : 'Product associated with the beneficiary phone.',
        'transaction_amount' : 'Amount of the transaction.',
        'available_balance' : 'Available balance for the transaction.',
        'svc_fees' : 'Service fees associated with the transaction.',
        'comm_total' : 'Total commission amount for the transaction.',
        'comm_agent' : 'Commission amount for the agent.',
        'comm_aggr' : 'Commission amount for the aggregator.',
        'comm_ours' : 'Commission amount for us.',
        'comm_other' : 'Payments to others associated with the transaction.',
        'comm_net_pct' : 'Net commission percentage.',
        'tax' : 'Tax amount associated with the transaction.',
        'excise_duty' : 'Excise duty amount.',
        'vat' : 'Value-added tax (VAT) amount.',
        'transmit_amount' : 'Transmit amount for the transaction.',
        'comm_narration' : 'Narration describing how the commission was calculated.',
        'trans_currency' : 'Currency code for the transaction.',
        'trans_convert_currency' : 'Currency for currency conversion, if applicable.',
        'trans_currency_exchange_rate' : 'Exchange rate for currency conversion.',
        'trans_date' : 'Timestamp of the transaction date.',
        'customer_segment_id_fk' : 'Reference to the customer segment.',
        'agent_tier_level_id_fk' : 'Reference to the agent tier level.',
        'special_promotions_id_fk' : 'Reference to special promotions associated with the transaction.',
        'risk_profile_id_fk' : 'Risk associated with financial transactions',
        'fraud_marker' : 'Indicates whether the transaction is marked as fraudulent.',
        'fraud_eval_outcome' : 'Outcome of fraud evaluation (e.g., Fraud, Not Fraud, Unknown).',
        'fraud_risk_score' : 'Fraud risk score (values 1-1000).',
        'fraud_prediction_explanations' : 'List of explanations for how each event variable impacted the fraud prediction score.',
        'fraud_rule_evaluations' : 'Evaluations of the rules that were included in the detector version.',
        'fraud_event_num' : 'Event number returned by AWS Fraud Detector.',
        'trans_narration' : 'Narration containing details about the transaction.',
    }
    # list_exclude_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # show_exclude_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # edit_exclude_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # add_exclude_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # search_exclude_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # order_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # add_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # add_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    # add_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
    
    label_columns = {'coupon':'Coupon', 'customer_name':'Customer Name', 'trans_purpose':'Trans Purpose', 'customer_id':'Customer Id', 'transaction_type':'Transaction Type', 'card_trans_type':'Card Trans Type', 'agent':'Agent', 'payment_card':'Payment Card', 'pos':'Pos', 'wallet':'Wallet', 'biller':'Biller', 'biller_offering':'Biller Offering', 'trans_time':'Trans Time', 'currency':'Currency', 'trans_status':'Trans Status', 'trans_route':'Trans Route', 'origin_source':'Origin Source', 'origin_ref_code':'Origin Ref Code', 'origin_trans_notes':'Origin Trans Notes', 'origin_bank':'Origin Bank', 'origin_institution_code':'Origin Institution Code', 'origin_account_num':'Origin Account Num', 'origin_account_name':'Origin Account Name', 'origin_KYC_Level':'Origin Kyc Level', 'origin_Bank_Verification_Number':'Origin Bank Verification Number', 'origin_bvn':'Origin Bvn', 'session_ref':'Session Ref', 'transaction_ref':'Transaction Ref', 'channelCode':'Channelcode', 'name_enquiry_ref':'Name Enquiry Ref', 'api_transactionid':'Api Transactionid', 'receipt_no':'Receipt No', 'pin_based':'Pin Based', 'pin_code':'Pin Code', 'pin_option':'Pin Option', 'authorization_code':'Authorization Code', 'acquirer_name':'Acquirer Name', 'currency':'Currency', 'transaction_location':'Transaction Location', 'payment_reference':'Payment Reference', 'response_code':'Response Code', 'trans_dest':'Trans Dest', 'bene_ref_code':'Bene Ref Code', 'bene_trans_notes':'Bene Trans Notes', 'bene_bank':'Bene Bank', 'bene_account_num':'Bene Account Num', 'bene_institution_code':'Bene Institution Code', 'bene_bank_verification_number':'Bene Bank Verification Number', 'bene_KYC_Level':'Bene Kyc Level', 'bene_account_name':'Bene Account Name', 'bene_phone_number':'Bene Phone Number', 'bene_phone_denom':'Bene Phone Denom', 'bene_phone_product':'Bene Phone Product', 'transaction_amount':'Transaction Amount', 'available_balance':'Available Balance', 'svc_fees':'Svc Fees', 'comm_total':'Comm Total', 'comm_agent':'Comm Agent', 'comm_aggr':'Comm Aggr', 'comm_ours':'Comm Ours', 'comm_other':'Comm Other', 'comm_net_pct':'Comm Net Pct', 'tax':'Tax', 'excise_duty':'Excise Duty', 'vat':'Vat', 'transmit_amount':'Transmit Amount', 'comm_narration':'Comm Narration', 'trans_currency':'Trans Currency', 'trans_convert_currency':'Trans Convert Currency', 'trans_currency_exchange_rate':'Trans Currency Exchange Rate', 'trans_date':'Trans Date', 'customer_segment':'Customer Segment', 'agent_tier_level':'Agent Tier Level', 'special_promotions':'Special Promotions', 'risk_profile':'Risk Profile', 'fraud_marker':'Fraud Marker', 'fraud_eval_outcome':'Fraud Eval Outcome', 'fraud_risk_score':'Fraud Risk Score', 'fraud_prediction_explanations':'Fraud Prediction Explanations', 'fraud_rule_evaluations':'Fraud Rule Evaluations', 'fraud_event_num':'Fraud Event Num', 'trans_narration':'Trans Narration'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['coupon', 'customer_name', 'trans_purpose', 'customer_id', 'transaction_type', 'card_trans_type', 'agent', 'payment_card', 'pos', 'wallet', 'biller', 'biller_offering', 'trans_time', 'currency', 'trans_status', 'trans_route', 'origin_source', 'origin_ref_code', 'origin_trans_notes', 'origin_bank', 'origin_institution_code', 'origin_account_num', 'origin_account_name', 'origin_KYC_Level', 'origin_Bank_Verification_Number', 'origin_bvn', 'session_ref', 'transaction_ref', 'channelCode', 'name_enquiry_ref', 'api_transactionid', 'receipt_no', 'pin_based', 'pin_code', 'pin_option', 'authorization_code', 'acquirer_name', 'currency', 'transaction_location', 'payment_reference', 'response_code', 'trans_dest', 'bene_ref_code', 'bene_trans_notes', 'bene_bank', 'bene_account_num', 'bene_institution_code', 'bene_bank_verification_number', 'bene_KYC_Level', 'bene_account_name', 'bene_phone_number', 'bene_phone_denom', 'bene_phone_product', 'transaction_amount', 'available_balance', 'svc_fees', 'comm_total', 'comm_agent', 'comm_aggr', 'comm_ours', 'comm_other', 'comm_net_pct', 'tax', 'excise_duty', 'vat', 'transmit_amount', 'comm_narration', 'trans_currency', 'trans_convert_currency', 'trans_currency_exchange_rate', 'trans_date', 'customer_segment', 'agent_tier_level', 'special_promotions', 'risk_profile', 'fraud_marker', 'fraud_eval_outcome', 'fraud_risk_score', 'fraud_prediction_explanations', 'fraud_rule_evaluations', 'fraud_event_num', 'trans_narration']
class AgentDocLinkModelView(ModelView):
    datamodel = SQLAInterface(AgentDocLink)
    list_title = 'List Agent Doc Link'
    show_title = 'Show Agent Doc Link'
    edit_title = 'Edit Agent Doc Link'
    add_title  = 'Add Agent Doc Link'
 
    list_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # show_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # edit_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    add_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # search_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    description_columns = {
        'agent_id_fk' : 'Foreign key reference to the agent whose document is linked.',
        'doc_id_fk' : 'Foreign key reference to the document being linked.',
        'verification_status' : 'Status of document verification, with a default value of _pending_.',
        'submit_date' : 'Timestamp when the document is submitted, with a default value of the current timestamp.',
        'notes' : 'Additional notes or comments related to the document link.',
    }
    # list_exclude_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # show_exclude_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # edit_exclude_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # add_exclude_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # search_exclude_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # order_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # add_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # add_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    # add_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
    
    label_columns = {'agent':'Agent', 'doc':'Doc', 'verification_status':'Verification Status', 'submit_date':'Submit Date', 'notes':'Notes'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['agent', 'doc', 'verification_status', 'submit_date', 'notes']
class PersonDocLinkModelView(ModelView):
    datamodel = SQLAInterface(PersonDocLink)
    list_title = 'List Person Doc Link'
    show_title = 'Show Person Doc Link'
    edit_title = 'Edit Person Doc Link'
    add_title  = 'Add Person Doc Link'
 
    list_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # show_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # edit_columns = ['person', 'doc', 'verification_status', 'submit_date']
    add_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # search_columns = ['person', 'doc', 'verification_status', 'submit_date']
    description_columns = {
        'person_id_fk' : 'Foreign key reference to the person whose document is linked.',
        'doc_id_fk' : 'Foreign key reference to the document being linked.',
        'verification_status' : 'Status of document verification, with a default value of _pending_.',
        'submit_date' : 'Timestamp when the document is submitted, with a default value of the current timestamp.',
    }
    # list_exclude_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # show_exclude_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # edit_exclude_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # add_exclude_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # search_exclude_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # order_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # add_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # add_columns = ['person', 'doc', 'verification_status', 'submit_date']
    # add_columns = ['person', 'doc', 'verification_status', 'submit_date']
    
    label_columns = {'person':'Person', 'doc':'Doc', 'verification_status':'Verification Status', 'submit_date':'Submit Date'}
    # base_filters = [['created_by', FilterEqualFunction, get_user],['name', FilterStartsWith, 'a']]
    # base_order = ("name", "asc")
    # page_size = 100 
#    list_columns = ['person', 'doc', 'verification_status', 'submit_date']
class UserExt_UserExtMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(UserExt)
    related_views = [UserExtModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class BillerCategory_BillerMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(BillerCategory)
    related_views = [BillerModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Country_StateMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Country)
    related_views = [StateModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class TokenProvider_TokenMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(TokenProvider)
    related_views = [TokenModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Biller_BillerOfferingMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Biller)
    related_views = [BillerOfferingModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class State_LgaMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(State)
    related_views = [LgaModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Bank_AgentMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Bank)
    related_views = [AgentModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Country_AgentMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Country)
    related_views = [AgentModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class UserExt_AgentMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(UserExt)
    related_views = [AgentModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Lga_AgentMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Lga)
    related_views = [AgentModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class State_AgentMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(State)
    related_views = [AgentModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_AgentMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [AgentModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class AgentTier_AgentMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(AgentTier)
    related_views = [AgentModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class UserExt_PosMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(UserExt)
    related_views = [PosModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class State_PosMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(State)
    related_views = [PosModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Lga_PosMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Lga)
    related_views = [PosModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Pos_AgentPosLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Pos)
    related_views = [AgentPosLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_AgentPosLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [AgentPosLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class State_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(State)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class TransType_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(TransType)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Currency_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Currency)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class BillerOffering_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(BillerOffering)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Biller_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Biller)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class CustomerSegment_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(CustomerSegment)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Lga_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Lga)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Promotion_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Promotion)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class AgentTier_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(AgentTier)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class RiskProfile_CommissionMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(RiskProfile)
    related_views = [CommissionModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_PersonMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [PersonModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Person_PersonMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Person)
    related_views = [PersonModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Pos_WalletMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Pos)
    related_views = [WalletModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_WalletMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [WalletModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Person_AgentPersonLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Person)
    related_views = [AgentPersonLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_AgentPersonLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [AgentPersonLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_ContactMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [ContactModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class ContactType_ContactMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(ContactType)
    related_views = [ContactModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Person_ContactMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Person)
    related_views = [ContactModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class MimeType_DocMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(MimeType)
    related_views = [DocModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class DocType_DocMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(DocType)
    related_views = [DocModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Person_DocMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Person)
    related_views = [DocModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_DocMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [DocModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Person_PersonAdminDataMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Person)
    related_views = [PersonAdminDataModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Bank_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Bank)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Pos_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Pos)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Promotion_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Promotion)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Coupon_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Coupon)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class CustomerSegment_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(CustomerSegment)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class RiskProfile_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(RiskProfile)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class AgentTier_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(AgentTier)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class BillerOffering_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(BillerOffering)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Currency_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Currency)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Biller_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Biller)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Wallet_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Wallet)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class TransRoutingThresholds_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(TransRoutingThresholds)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class PaymentCard_TransMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(PaymentCard)
    related_views = [TransModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Doc_AgentDocLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Doc)
    related_views = [AgentDocLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Agent_AgentDocLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Agent)
    related_views = [AgentDocLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Person_PersonDocLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Person)
    related_views = [PersonDocLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class Doc_PersonDocLinkMasterDetailView(MasterDetailView):
    datamodel = SQLAInterface(Doc)
    related_views = [PersonDocLinkModelView]
    show_template = 'appbuilder/general/model/show_cascade.html'

class UserExtMultipleView(MultipleView):
    datamodel = SQLAInterface(UserExt)
    views = [StateModelView, AgentTierModelView, BankModelView, CountryModelView, AgentModelView, LgaModelView, UserExtModelView]

class LgaMultipleView(MultipleView):
    datamodel = SQLAInterface(Lga)
    views = [StateModelView, LgaModelView, UserExtModelView]

class AgentMultipleView(MultipleView):
    datamodel = SQLAInterface(Agent)
    views = [AgentModelView, PosModelView]

class RiskProfileMultipleView(MultipleView):
    datamodel = SQLAInterface(RiskProfile)
    views = [StateModelView, CustomerSegmentModelView, AgentModelView, CurrencyModelView, RiskProfileModelView, BillerOfferingModelView, LgaModelView, TransTypeModelView, PromotionModelView, BillerModelView, AgentTierModelView]

class PersonMultipleView(MultipleView):
    datamodel = SQLAInterface(Person)
    views = [AgentModelView, PersonModelView]

class PaymentCardMultipleView(MultipleView):
    datamodel = SQLAInterface(PaymentCard)
    views = [PaymentCardModelView, BankModelView, CustomerSegmentModelView, AgentModelView, RiskProfileModelView, CurrencyModelView, TransRoutingThresholdsModelView, CouponModelView, BillerOfferingModelView, PosModelView, WalletModelView, PromotionModelView, BillerModelView, AgentTierModelView]

class DocMultipleView(MultipleView):
    datamodel = SQLAInterface(Doc)
    views = [DocModelView, PersonModelView]


appbuilder.add_view(AgentTierModelView, "Agent Tier", icon="fa-folder-open-o", category="Operations")
appbuilder.add_view(AgentModelView, "Agent", icon="fa-folder-open-o", category="Operations")
appbuilder.add_view(CommissionModelView, "Commission", icon="fa-folder-open-o", category="Operations")
appbuilder.add_view(WalletModelView, "Wallet", icon="fa-folder-open-o", category="Operations")
appbuilder.add_separator("Operations")

appbuilder.add_view(BillerCategoryModelView, "Biller Category", icon="fa-folder-open-o", category="Setup")
appbuilder.add_view(ContactTypeModelView, "Contact Type", icon="fa-folder-open-o", category="Setup")
appbuilder.add_view(CurrencyModelView, "Currency", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(CountryModelView, "Country", icon="fa-folder-open-o", category="Setup")
appbuilder.add_view(StateModelView, "State", icon="fa-folder-open-o", category="Setup")
appbuilder.add_view(LgaModelView, "Lga", icon="fa-folder-open-o", category="Setup")
appbuilder.add_view(BankModelView, "Bank", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(CouponModelView, "Coupon", icon="fa-folder-open-o", category="Operations")
appbuilder.add_view(PaymentCardModelView, "Payment Card", icon="fa-folder-open-o", category="Operations")
appbuilder.add_view(TransTypeModelView, "Trans Type", icon="fa-folder-open-o", category="Operations")
appbuilder.add_view(TransRoutingThresholdsModelView, "Trans Routing Thresholds", icon="fa-folder-open-o", category="Operations")
appbuilder.add_view(BillerOfferingModelView, "Biller Offering", icon="fa-folder-open-o", category="Operations")




appbuilder.add_view(CustomerSegmentModelView, "Customer Segment", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(DocTypeModelView, "Doc Type", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(MimeTypeModelView, "Mime Type", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(MimeTypeMapModelView, "Mime Type Map", icon="fa-folder-open-o", category="Setup")



appbuilder.add_view(PromotionModelView, "Promotion", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(RiskProfileModelView, "Risk Profile", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(TechparamsModelView, "Techparams", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(TokenProviderModelView, "Token Provider", icon="fa-folder-open-o", category="Setup")




appbuilder.add_view(UserExtModelView, "User Ext", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(BillerModelView, "Biller", icon="fa-folder-open-o", category="Setup")



appbuilder.add_view(TokenModelView, "Token", icon="fa-folder-open-o", category="Setup")







appbuilder.add_view(PosModelView, "Pos", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(AgentPosLinkModelView, "Agent Pos Link", icon="fa-folder-open-o", category="Setup")



appbuilder.add_view(PersonModelView, "Person", icon="fa-folder-open-o", category="Setup")



appbuilder.add_view(AgentPersonLinkModelView, "Agent Person Link", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(ContactModelView, "Contact", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(DocModelView, "Doc", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(PersonAdminDataModelView, "Person Admin Data", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(TransModelView, "Trans", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(AgentDocLinkModelView, "Agent Doc Link", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(PersonDocLinkModelView, "Person Doc Link", icon="fa-folder-open-o", category="Setup")

appbuilder.add_view(UserExt_UserExtMasterDetailView, "User Ext", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(BillerCategory_BillerMasterDetailView, "Biller Category", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Country_StateMasterDetailView, "Country", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(TokenProvider_TokenMasterDetailView, "Token Provider", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Biller_BillerOfferingMasterDetailView, "Biller", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(State_LgaMasterDetailView, "State", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Bank_AgentMasterDetailView, "Bank", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Country_AgentMasterDetailView, "Country", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(UserExt_AgentMasterDetailView, "User Ext", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Lga_AgentMasterDetailView, "Lga", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(State_AgentMasterDetailView, "State", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_AgentMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(AgentTier_AgentMasterDetailView, "Agent Tier", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(UserExt_PosMasterDetailView, "User Ext", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(State_PosMasterDetailView, "State", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Lga_PosMasterDetailView, "Lga", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Pos_AgentPosLinkMasterDetailView, "Pos", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_AgentPosLinkMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(State_CommissionMasterDetailView, "State", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(TransType_CommissionMasterDetailView, "Trans Type", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_CommissionMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Currency_CommissionMasterDetailView, "Currency", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(BillerOffering_CommissionMasterDetailView, "Biller Offering", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Biller_CommissionMasterDetailView, "Biller", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(CustomerSegment_CommissionMasterDetailView, "Customer Segment", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Lga_CommissionMasterDetailView, "Lga", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Promotion_CommissionMasterDetailView, "Promotion", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(AgentTier_CommissionMasterDetailView, "Agent Tier", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(RiskProfile_CommissionMasterDetailView, "Risk Profile", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_PersonMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Person_PersonMasterDetailView, "Person", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Pos_WalletMasterDetailView, "Pos", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_WalletMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Person_AgentPersonLinkMasterDetailView, "Person", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_AgentPersonLinkMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_ContactMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(ContactType_ContactMasterDetailView, "Contact Type", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Person_ContactMasterDetailView, "Person", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(MimeType_DocMasterDetailView, "Mime Type", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(DocType_DocMasterDetailView, "Doc Type", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Person_DocMasterDetailView, "Person", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_DocMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Person_PersonAdminDataMasterDetailView, "Person", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Bank_TransMasterDetailView, "Bank", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Pos_TransMasterDetailView, "Pos", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Promotion_TransMasterDetailView, "Promotion", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Coupon_TransMasterDetailView, "Coupon", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(CustomerSegment_TransMasterDetailView, "Customer Segment", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(RiskProfile_TransMasterDetailView, "Risk Profile", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(AgentTier_TransMasterDetailView, "Agent Tier", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(BillerOffering_TransMasterDetailView, "Biller Offering", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Currency_TransMasterDetailView, "Currency", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Biller_TransMasterDetailView, "Biller", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Wallet_TransMasterDetailView, "Wallet", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(TransRoutingThresholds_TransMasterDetailView, "Trans Routing Thresholds", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_TransMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(PaymentCard_TransMasterDetailView, "Payment Card", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Doc_AgentDocLinkMasterDetailView, "Doc", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Agent_AgentDocLinkMasterDetailView, "Agent", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Person_PersonDocLinkMasterDetailView, "Person", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(Doc_PersonDocLinkMasterDetailView, "Doc", icon="fa-folder-open-o", category="Review")

appbuilder.add_view(UserExtMultipleView, "User Ext", icon="fa-folder-open-o", category="Inspect")

appbuilder.add_view(LgaMultipleView, "Lga", icon="fa-folder-open-o", category="Inspect")

appbuilder.add_view(AgentMultipleView, "Agent", icon="fa-folder-open-o", category="Inspect")

appbuilder.add_view(RiskProfileMultipleView, "Risk Profile", icon="fa-folder-open-o", category="Inspect")

appbuilder.add_view(PersonMultipleView, "Person", icon="fa-folder-open-o", category="Inspect")

appbuilder.add_view(PaymentCardMultipleView, "Payment Card", icon="fa-folder-open-o", category="Inspect")

appbuilder.add_view(DocMultipleView, "Doc", icon="fa-folder-open-o", category="Inspect")


appbuilder.add_link("rest_api", href="/swagger/v1", icon="fa-sliders", label="REST Api", category="Utilities")
appbuilder.add_link("graphql", href="/graphql", icon="fa-wrench", label="GraphQL", category="Utilities")


#appbuilder.add_separator("Setup")
#appbuilder.add_separator("My Views")
#appbuilder.add_link(name, href, icon='', label='', category='', category_icon='', category_label='', baseview=None)

'''
     Application wide 404 error handler
'''

@appbuilder.app.errorhandler(404)
def page_not_found(e):
    return (
        render_template(
           "404.html", base_template=appbuilder.base_template, appbuilder=appbuilder
        ),
        404,
     )


db.create_all()
appbuilder.security_cleanup()
